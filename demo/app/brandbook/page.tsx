'use client';

import { ReactNode, useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { CheckCircle2, ExternalLink, Users, BarChart3, DollarSign, LayoutDashboard, Layers, ShieldCheck, LifeBuoy, FileText, Zap, Copy, Trash2, Download, PenLine, Clock, Send } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import Modal from '@/components/ui/modal';
import { useToast } from '@/components/ui/toast';
import Hero from '@/components/general/Hero';
import Navigation from '@/components/general/Navigation';
import Stats from '@/components/general/Stats';
import Features from '@/components/general/Features';
import TestimonialSlider from '@/components/general/TestimonialSlider';
import CourseCard from '@/components/general/CourseCard';
import CTA from '@/components/general/CTA';
import ComponentShowcase from '@/components/brandbook/ComponentShowcase';
import DashboardWidgets from '@/components/admin/DashboardWidgets';
import DataTable, { type AdminTableColumn } from '@/components/admin/DataTable';
import AdminForm from '@/components/admin/AdminForm';
import FinanceCharts from '@/components/FinanceCharts';
import Footer from '@frontend/components/general/Footer';
import {
  TextField,
  TextareaField,
  PasswordField,
  NumberField,
  ColorPickerField,
} from '@frontend/components/ui/formFields';
import {
  CheckboxField,
  RadioGroupField,
  SelectField,
  SwitchField,
  SearchField,
} from '@frontend/components/ui/choiceFields';
import TextLink from '@frontend/components/ui/textLink';
import { InlineMessage } from '@frontend/components/ui/inlineMessage';
import { AlertBanner } from '@frontend/components/ui/alertBanner';
import Pagination from '@frontend/components/ui/pagination';
import Breadcrumbs from '@frontend/components/ui/breadcrumbs';
import { Chip, FilterPill } from '@frontend/components/ui/chip';
import { LoadMoreButton } from '@frontend/components/ui/loadMoreButton';
import Slider, { RangeSlider } from '@frontend/components/ui/slider';
import Stepper from '@frontend/components/ui/stepper';
import Calendar, { type CalendarEvent } from '@frontend/components/ui/calendar';
import Autocomplete, { type AutocompleteOption } from '@frontend/components/ui/autocomplete';
import { DatePicker, DateTimePicker, TimePicker } from '@frontend/components/ui/datePickers';
import MegaMenu, { type MegaMenuColumn } from '@frontend/components/navigation/MegaMenu';
import ContextMenu, { type ContextMenuItem } from '@frontend/components/ui/contextMenu';
import SplitButton, { type SplitButtonOption } from '@frontend/components/ui/splitButton';
import FileUploader from '@frontend/components/ui/fileUploader';
import Tooltip from '@frontend/components/ui/tooltip';
import Popover from '@frontend/components/ui/popover';
import Accordion from '@frontend/components/ui/accordion';
import Tabs from '@frontend/components/ui/tabs';
import Toolbar, { ToolbarGroup, ToolbarSeparator } from '@frontend/components/ui/toolbar';
import List from '@frontend/components/ui/list';
import LayoutGrid, { LayoutSection } from '@frontend/components/ui/layoutGrid';
import StatCard from '@frontend/components/ui/statCard';
import SectionHeader from '@frontend/components/ui/sectionHeader';
import { Badge, StatusTag } from '@frontend/components/ui/badge';
import { ProgressBar, ProgressCircle } from '@frontend/components/ui/progress';
import Avatar from '@frontend/components/ui/avatar';
import InputMaskField from '@frontend/components/ui/inputMaskField';
import { ThemeToggle } from '@frontend/components/ui/themeToggle';

type DemoUser = {
  id: string;
  name: string;
  email: string;
  role: 'Student' | 'Instructor' | 'Admin';
  status: 'Active' | 'Invited' | 'Suspended';
};

type AdminFormFieldConfig = {
  name: string;
  label: string;
  type: 'text' | 'email' | 'password' | 'number' | 'textarea' | 'select' | 'checkbox';
  options?: { label: string; value: string }[];
  required?: boolean;
  placeholder?: string;
  helperText?: string;
};

type FieldShowcaseState = {
  name: string;
  email: string;
  password: string;
  price: string;
  description: string;
  role: string;
  marketing: boolean;
  notifications: boolean;
  plan: string;
  search: string;
  phone: string;
  pesel: string;
  brandColor: string;
};

const palette = [
  { name: 'Primary / Indigo 600', value: '#2563EB', usage: 'CTA, aktywne linki, wyr√≥≈ºnienia' },
  { name: 'Secondary / Slate 700', value: '#334155', usage: 'Teksty nag≈Ç√≥wk√≥w, ikony' },
  { name: 'Accent / Sky 100', value: '#E0F2FE', usage: 'T≈Ça kart onboardingowych' },
  { name: 'Success / Emerald 500', value: '#10B981', usage: 'Statusy pozytywne, potwierdzenia' },
  { name: 'Warning / Amber 500', value: '#F59E0B', usage: 'Alerty ostrzegawcze, badge wstrzymane' },
  { name: 'Danger / Rose 500', value: '#F43F5E', usage: 'B≈Çƒôdy krytyczne, akcje usuwania' },
  { name: 'Neutral / Gray 100', value: '#F3F4F6', usage: 'T≈Ça sekcji, dzielƒÖce bloki' },
];

const typographySamples = [
  { label: 'Nag≈Ç√≥wek H1', className: 'text-4xl font-bold', sample: 'EduPlatform ‚Äì Ucz siƒô bez ogranicze≈Ñ' },
  { label: 'Nag≈Ç√≥wek H2', className: 'text-3xl font-semibold', sample: 'Panel administracyjny' },
  { label: 'Podtytu≈Ç', className: 'text-xl text-muted-foreground', sample: 'Nowoczesna platforma do zarzƒÖdzania edukacjƒÖ' },
  { label: 'Tekst g≈Ç√≥wny', className: 'text-base text-foreground', sample: 'Dostarczaj kursy, monitoruj postƒôpy i anga≈ºuj student√≥w w jednym miejscu.' },
  { label: 'Caption', className: 'text-xs uppercase tracking-wide text-muted-foreground', sample: 'Komponent UI' },
];

const marketingStats = [
  { number: '50K+', label: 'Aktywnych student√≥w' },
  { number: '200+', label: 'Kurs√≥w premium' },
  { number: '98%', label: 'Satysfakcji' },
  { number: '24/7', label: 'Wsparcia' },
];

const marketingFeatures = [
  { title: 'Eksperci bran≈ºowi', description: 'Zajƒôcia prowadzone przez lider√≥w rynku w swoich dziedzinach.', icon: 'üéì' },
  { title: 'Elastyczne ≈õcie≈ºki', description: '≈ÅƒÖcz modu≈Çy kurs√≥w, aby tworzyƒá w≈Çasne ≈õcie≈ºki rozwoju.', icon: 'üß≠' },
  { title: 'Automatyzacja raport√≥w', description: '≈öled≈∫ postƒôpy i wyniki dziƒôki gotowym dashboardom.', icon: 'üìä' },
  { title: 'Spo≈Çeczno≈õƒá', description: 'Buduj spo≈Çeczno≈õƒá i wspieraj networking student√≥w.', icon: 'üí¨' },
];

const courseSuggestions: AutocompleteOption[] = [
  { label: 'React dla zespo≈Ç√≥w', value: 'react-teams', description: '≈öcie≈ºka front-end dla zespo≈Ç√≥w produktowych.' },
  { label: 'Design Systems w praktyce', value: 'design-systems', description: 'Budowa system√≥w UI end-to-end.' },
  { label: 'AI w edukacji', value: 'ai-education', description: 'Automatyzacja tworzenia materia≈Ç√≥w i tutoring.' },
  { label: 'ZarzƒÖdzanie zmianƒÖ', value: 'change-management', description: 'Wsparcie zespo≈Ç√≥w w transformacji.' },
  { label: 'Warsztaty UX', value: 'ux-workshop', description: 'Badania, testy i analizy UX w praktyce.' },
];

const mentorSuggestions: AutocompleteOption[] = [
  { label: 'Anna Kowalska', value: 'anna', description: 'Specjalistka ds. onboardingu' },
  { label: 'Jakub Nowak', value: 'jakub', description: 'Ekspert front-end' },
  { label: 'Marta Lewandowska', value: 'marta', description: 'Koordynator ds. quality assurance' },
  { label: 'Igor W√≥jcik', value: 'igor', description: 'Data storytelling mentor' },
];

const onboardingSteps = [
  {
    title: 'Szczeg√≥≈Çy',
    description: 'Uzupe≈Çnij podstawowe informacje o kursie.',
    optionalLabel: '3 min',
    content: (
      <div className="space-y-2 text-left">
        <p>Wprowad≈∫ nazwƒô programu, kr√≥tki opis oraz kategorie widoczno≈õci.</p>
        <ul className="list-disc space-y-1 pl-5 text-xs text-muted-foreground">
          <li>Dodaj wyr√≥≈ºniajƒÖcƒÖ miniaturƒô kursu.</li>
          <li>Ustal jƒôzyk prowadzenia i poziom trudno≈õci.</li>
        </ul>
      </div>
    ),
  },
  {
    title: 'Konfiguracja',
    description: 'Ustal harmonogram i prowadzƒÖcych.',
    optionalLabel: '8 min',
    content: (
      <div className="space-y-2 text-left">
        <p>Zaplanuj strukturƒô modu≈Ç√≥w i przypisz mentor√≥w do poszczeg√≥lnych lekcji.</p>
        <ul className="list-disc space-y-1 pl-5 text-xs text-muted-foreground">
          <li>Okre≈õl zasady dostƒôpu i progi zaliczeniowe.</li>
          <li>W≈ÇƒÖcz automatyczne powiadomienia o nowych materia≈Çach.</li>
        </ul>
      </div>
    ),
  },
  {
    title: 'Publikacja',
    description: 'Opublikuj kurs i powiadom interesariuszy.',
    optionalLabel: '2 min',
    content: (
      <div className="space-y-2 text-left">
        <p>Zweryfikuj kompletno≈õƒá materia≈Ç√≥w i wy≈õlij zaproszenia do uczestnik√≥w.</p>
        <ul className="list-disc space-y-1 pl-5 text-xs text-muted-foreground">
          <li>Ustaw widoczno≈õƒá kursu (prywatny/publiczny).</li>
          <li>Dodaj baner promocyjny oraz w≈ÇƒÖcz stronƒô sprzeda≈ºowƒÖ.</li>
        </ul>
      </div>
    ),
  },
];

const reviewWorkflowSteps = [
  {
    title: 'Draft',
    description: 'Zesp√≥≈Ç produktowy z≈Ço≈ºy≈Ç szkic modu≈Çu.',
    status: 'complete' as const,
    meta: 'Zako≈Ñczono 12.04',
  },
  {
    title: 'Review',
    description: 'Eksperci merytoryczni oceniajƒÖ zawarto≈õƒá.',
    status: 'current' as const,
    meta: '2 komentarze oczekujƒÖ na odpowied≈∫',
  },
  {
    title: 'Compliance',
    description: 'Kontrola zgodno≈õci prawnej i certyfikacyjnej.',
    status: 'upcoming' as const,
    meta: 'Planowana data: 20.04',
  },
  {
    title: 'Publikacja',
    description: 'Modu≈Ç gotowy do publikacji.',
    status: 'upcoming' as const,
    meta: 'Czeka na zatwierdzenie dyrektora programu',
  },
];

const badgeVariantShowcase: Array<{
  tone: 'neutral' | 'info' | 'success' | 'warning' | 'danger';
  variant: 'solid' | 'subtle' | 'outline';
  label: string;
}> = [
  { tone: 'neutral', variant: 'subtle', label: 'Draft' },
  { tone: 'info', variant: 'solid', label: 'Nowo≈õƒá' },
  { tone: 'success', variant: 'solid', label: 'Aktywny' },
  { tone: 'warning', variant: 'outline', label: 'Wstrzymany' },
  { tone: 'danger', variant: 'subtle', label: 'Ryzyko' },
];

const statusTagShowcase: Array<{ status: 'default' | 'success' | 'info' | 'warning' | 'danger' | 'offline'; label: string }> = [
  { status: 'success', label: 'Opublikowany kurs' },
  { status: 'info', label: 'Planowany webinar' },
  { status: 'warning', label: 'Limit miejsc' },
  { status: 'danger', label: 'B≈ÇƒÖd p≈Çatno≈õci' },
  { status: 'offline', label: 'Mentor offline' },
];

const avatarShowcase = [
  {
    name: 'Anna Kowalska',
    role: 'Instruktorka UX',
    status: 'online' as const,
    src: '/api/placeholder/96/96?text=AK',
  },
  {
    name: 'Micha≈Ç Nowak',
    role: 'Mentor Frontend',
    status: 'away' as const,
    src: '/api/placeholder/96/96?text=MN',
  },
  {
    name: 'Zesp√≥≈Ç sprzeda≈ºy',
    role: 'Kana≈Ç zespo≈Çowy',
    status: 'busy' as const,
    src: '',
  },
];


const megaMenuColumns: MegaMenuColumn[] = [
  {
    heading: 'ZarzƒÖdzanie',
    items: [
      { label: 'Pulpit', description: 'Szybki wglƒÖd w KPI platformy.', href: '/admin/dashboard', icon: <LayoutDashboard className="h-4 w-4" /> },
      { label: 'Kursy', description: 'Tworzenie i aktualizacja katalogu.', href: '/admin/courses', icon: <Layers className="h-4 w-4" /> },
      { label: 'Raporty', description: 'Generowanie raport√≥w PDF/CSV.', href: '/admin/reports', icon: <FileText className="h-4 w-4" /> },
    ],
  },
  {
    heading: 'Bezpiecze≈Ñstwo',
    items: [
      { label: 'Role i uprawnienia', description: 'ZarzƒÖdzanie dostƒôpami zespo≈Çu.', href: '/admin/settings#roles', icon: <ShieldCheck className="h-4 w-4" /> },
      { label: 'Logi audytowe', description: 'Monitorowanie aktywno≈õci u≈ºytkownik√≥w.', href: '/admin/monitoring', icon: <LifeBuoy className="h-4 w-4" /> },
      { label: 'Integracje', description: 'API, SSO, webhooki.', href: '/integrations', icon: <Zap className="h-4 w-4" /> },
    ],
  },
];

const resourceContextMenu: Array<Omit<ContextMenuItem, 'onSelect'>> = [
  { label: 'Duplikuj', icon: <Copy className="h-4 w-4" />, shortcut: '‚åòD' },
  { label: 'Pobierz .csv', icon: <Download className="h-4 w-4" />, shortcut: '‚åò‚áßS' },
  { label: 'Edytuj', icon: <PenLine className="h-4 w-4" />, shortcut: 'E' },
  { label: 'Usu≈Ñ', icon: <Trash2 className="h-4 w-4" />, danger: true },
];

const splitButtonOptions: Array<Omit<SplitButtonOption, 'onSelect'>> = [
  { label: 'Utw√≥rz kurs', description: 'Manualne wprowadzenie programu.' },
  { label: 'Import z CSV', description: 'Zaimportuj dane z pliku.' },
  { label: 'Szablon AI', description: 'Wygeneruj strukturƒô kursu automatycznie.' },
];

const accordionItems = [
  {
    id: 'governance',
    title: 'Standardy dostƒôpu i uprawnie≈Ñ',
    description: 'Jak konfigurowaƒá role, grupy i poziomy uprawnie≈Ñ na platformie.',
    content: (
      <div className="space-y-2">
        <p>Ka≈ºdy kurs dziedziczy uprawnienia z poziomu organizacji. Mo≈ºesz nadpisaƒá je na poziomie modu≈Çu.</p>
        <ul className="list-disc space-y-1 pl-5 text-xs text-muted-foreground">
          <li>Role niestandardowe warto nazywaƒá z prefiksem zespo≈Çu (np. DX-Editor).</li>
          <li>Aktywny audyt log√≥w u≈Çatwia wykrywanie eskalacji uprawnie≈Ñ.</li>
        </ul>
      </div>
    ),
    meta: 'Doc v2.1',
  },
  {
    id: 'publishing',
    title: 'Workflow publikacji kurs√≥w',
    description: 'Przejrzyj automatyczne powiadomienia i wymagane zatwierdzenia.',
    content: (
      <div className="space-y-2">
        <p>Publikacja wymaga potwierdzenia compliance, marketingu oraz w≈Ça≈õciciela programu.</p>
        <p className="text-xs text-muted-foreground">Powiadomienia mailowe wysy≈Çamy po ka≈ºdym etapie weryfikacji.</p>
      </div>
    ),
    meta: 'Workflow',
  },
  {
    id: 'analytics',
    title: 'Raporty i dashboardy',
    description: 'Jak czytaƒá metryki progresu i retencji uczni√≥w.',
    content: (
      <div className="space-y-2">
        <p>Panel analityczny posiada gotowe zestawy KPI dla zarzƒÖdu, prowadzƒÖcych i HR.</p>
        <p className="text-xs text-muted-foreground">Eksporty CSV/PDF generowane sƒÖ co godzinƒô ‚Äì mo≈ºesz je pobraƒá tak≈ºe rƒôcznie.</p>
      </div>
    ),
    meta: 'Analytics',
  },
];

const performanceTabs = [
  {
    id: 'overview',
    label: 'PrzeglƒÖd',
    icon: <LayoutDashboard className="h-4 w-4" />,
    content: (
      <div className="space-y-2">
        <p>Ca≈Ço≈õciowy obraz kondycji platformy ‚Äì przychody, aktywno≈õƒá u≈ºytkownik√≥w i retencja.</p>
        <p className="text-xs text-muted-foreground">Aktualizacja danych odbywa siƒô co 15 minut.</p>
      </div>
    ),
  },
  {
    id: 'users',
    label: 'U≈ºytkownicy',
    icon: <Users className="h-4 w-4" />,
    badge: <Badge tone="info" variant="subtle">+128</Badge>,
    content: (
      <div className="space-y-2">
        <p>Segmentacja nowych rejestracji wed≈Çug kana≈Çu marketingowego oraz aktywno≈õci.</p>
        <p className="text-xs text-muted-foreground">Wy≈õwietlamy tak≈ºe kohorty utrzymania na przestrzeni ostatnich 6 miesiƒôcy.</p>
      </div>
    ),
  },
  {
    id: 'finance',
    label: 'Finanse',
    icon: <DollarSign className="h-4 w-4" />,
    content: (
      <div className="space-y-2">
        <p>Por√≥wnanie przychod√≥w i koszt√≥w, prognoza MRR oraz status p≈Çatno≈õci.</p>
        <p className="text-xs text-muted-foreground">Sygna≈Çy ostrzegawcze pod≈õwietlamy kolorem amber/rose.</p>
      </div>
    ),
  },
];

const insightsTabs = [
  {
    id: 'stats',
    label: 'Statystyki',
    content: (
      <div className="space-y-2">
        <p>≈öredni czas uko≈Ñczenia kursu spad≈Ç o 8%, a satysfakcja wzros≈Ça do 92%.</p>
        <p className="text-xs text-muted-foreground">Te dane obejmujƒÖ wszystkie programy live i on-demand.</p>
      </div>
    ),
  },
  {
    id: 'feedback',
    label: 'Feedback',
    content: (
      <div className="space-y-2">
        <p>Zebrali≈õmy 124 nowe komentarze, z czego 87% zawiera pozytywne oceny prowadzƒÖcych.</p>
        <p className="text-xs text-muted-foreground">Najczƒôstsze sugestie: wiƒôcej ƒáwicze≈Ñ praktycznych.</p>
      </div>
    ),
  },
  {
    id: 'experiments',
    label: 'Eksperymenty',
    content: (
      <div className="space-y-2">
        <p>Testujemy nowe onboarding flows ‚Äì wariant B zwiƒôkszy≈Ç aktywacjƒô o 12%.</p>
        <p className="text-xs text-muted-foreground">Eksperyment trwa do ko≈Ñca miesiƒÖca.</p>
      </div>
    ),
  },
];



const testimonials = [
  { id: 1, name: 'Katarzyna W.', role: 'Product Designer', content: 'Platforma pozwoli≈Ça mi szybko przeszkoliƒá zesp√≥≈Ç z nowych narzƒôdzi UX. Uwielbiam interaktywne modu≈Çy.', rating: 5 },
  { id: 2, name: 'Micha≈Ç S.', role: 'Lead Developer', content: 'Mo≈ºliwo≈õƒá monitorowania postƒôp√≥w w czasie rzeczywistym to game changer. Wszystko w jednym panelu.', rating: 5 },
  { id: 3, name: 'Anna G.', role: 'HR Business Partner', content: '≈öwietne raporty, kt√≥re mogƒô wys≈Çaƒá do zarzƒÖdu jednym klikniƒôciem. Oszczƒôdza mn√≥stwo czasu.', rating: 5 },
];

const demoCourses = [
  { id: 1, title: 'React dla zespo≈Ç√≥w', instructor: 'Pawe≈Ç Kowalski', rating: 4.9, students: 1320, image: '/api/placeholder/400/225', price: 89, category: 'Frontend' },
  { id: 2, title: 'ZarzƒÖdzanie zmianƒÖ', instructor: 'Anna Zieli≈Ñska', rating: 4.8, students: 980, image: '/api/placeholder/400/225', price: 79, category: 'Leadership' },
  { id: 3, title: 'Data storytelling', instructor: 'Tomasz Lewandowski', rating: 4.7, students: 640, image: '/api/placeholder/400/225', price: 99, category: 'Analytics' },
  { id: 4, title: 'Design Systems w praktyce', instructor: 'Karolina Mazur', rating: 4.9, students: 450, image: '/api/placeholder/400/225', price: 109, category: 'Product Design' },
  { id: 5, title: 'Analytics Engineering', instructor: 'Marek Wo≈∫niak', rating: 4.6, students: 520, image: '/api/placeholder/400/225', price: 119, category: 'Data' },
  { id: 6, title: 'Storytelling dla lider√≥w', instructor: 'Paulina BƒÖk', rating: 4.8, students: 780, image: '/api/placeholder/400/225', price: 99, category: 'Leadership' },
];

const dashboardStats = [
  { title: 'Monthly Revenue', value: '$128,400', change: '+14.2%', icon: DollarSign, color: 'text-blue-600', changeColor: 'text-green-500' },
  { title: 'Active Users', value: '12,540', change: '+4.7%', icon: Users, color: 'text-emerald-600', changeColor: 'text-green-500' },
  { title: 'Course Completion', value: '87%', change: '+2.1%', icon: CheckCircle2, color: 'text-indigo-600', changeColor: 'text-green-500' },
  { title: 'NPS Score', value: '62', change: '+6', icon: BarChart3, color: 'text-purple-600', changeColor: 'text-green-500' },
];

const revenueData = [
  { name: 'Jan', revenue: 32000, expenses: 18000 },
  { name: 'Feb', revenue: 42000, expenses: 22000 },
  { name: 'Mar', revenue: 53000, expenses: 26000 },
  { name: 'Apr', revenue: 61000, expenses: 30000 },
  { name: 'May', revenue: 72000, expenses: 34000 },
  { name: 'Jun', revenue: 84000, expenses: 38000 },
];

const tableColumns: AdminTableColumn<DemoUser>[] = [
  { key: 'name', title: 'Imiƒô i nazwisko', sortable: true },
  { key: 'email', title: 'Email', sortable: true },
  { key: 'role', title: 'Rola', sortable: true },
  { key: 'status', title: 'Status', sortable: true, align: 'right' },
];

const tableData: DemoUser[] = [
  { id: '1', name: 'Alicja Nowak', email: 'alicja@edu.io', role: 'Student', status: 'Active' },
  { id: '2', name: 'Dominik W√≥jcik', email: 'dominik@edu.io', role: 'Instructor', status: 'Invited' },
  { id: '3', name: 'Joanna Kaczmarek', email: 'joanna@edu.io', role: 'Admin', status: 'Active' },
  { id: '4', name: 'Micha≈Ç Lewandowski', email: 'michal@edu.io', role: 'Student', status: 'Invited' },
  { id: '5', name: 'Karolina Pietrzak', email: 'karolina@edu.io', role: 'Instructor', status: 'Active' },
  { id: '6', name: '≈Åukasz Brzezi≈Ñski', email: 'lukasz@edu.io', role: 'Student', status: 'Suspended' },
  { id: '7', name: 'Ewa Stƒôpie≈Ñ', email: 'ewa@edu.io', role: 'Admin', status: 'Active' },
];

const calendarReference = startOfWeek(new Date());

function startOfWeek(date: Date) {
  const next = new Date(date);
  const day = next.getDay();
  const diff = next.getDate() - day + (day === 0 ? -6 : 1);
  next.setDate(diff);
  next.setHours(0, 0, 0, 0);
  return next;
}

function buildEvent(offsetDay: number, startHour: number, durationHours: number, overrides?: Partial<CalendarEvent>): CalendarEvent {
  const start = new Date(calendarReference);
  start.setDate(start.getDate() + offsetDay);
  start.setHours(startHour, 0, 0, 0);
  const end = new Date(start);
  end.setHours(startHour + durationHours, 0, 0, 0);
  return {
    id: `${offsetDay}-${startHour}`,
    title: 'Spotkanie zespo≈Çu',
    start,
    end,
    color: 'bg-indigo-500',
    ...overrides,
  };
}

const initialCalendarEvents: CalendarEvent[] = [
  buildEvent(0, 9, 2, { title: 'Plan tygodnia', location: 'Teams', category: 'meeting', description: 'PrzeglƒÖd zada≈Ñ na nadchodzƒÖcy tydzie≈Ñ' }),
  buildEvent(1, 11, 1, { title: '1:1 z mentorem', location: 'Sala 3.2', category: 'personal', description: 'Indywidualne spotkanie z mentorem' }),
  buildEvent(2, 13, 1.5, { title: 'Warsztat React', location: 'Sala warsztatowa', category: 'workshop', description: 'Warsztat zaawansowanych wzorc√≥w w React' }),
  buildEvent(4, 10, 3, { title: 'Demo sprintu', location: 'Zoom', category: 'demo', description: 'Prezentacja wynik√≥w dwutygodniowego sprintu' }),
  buildEvent(3, 14, 1, { title: 'Code review', location: 'Online', category: 'meeting', description: 'PrzeglƒÖd kodu z zespo≈Çem' }),
];

const formFields: AdminFormFieldConfig[] = [
  {
    name: 'name',
    label: 'Imiƒô i nazwisko',
    type: 'text',
    required: true,
    placeholder: 'Wpisz pe≈Çne imiƒô i nazwisko',
  },
  {
    name: 'email',
    label: 'Email',
    type: 'email',
    required: true,
    placeholder: 'adres@edu.io',
    helperText: 'Adres do powiadomie≈Ñ administracyjnych.',
  },
  {
    name: 'role',
    label: 'Rola',
    type: 'select',
    required: true,
    options: [
      { label: 'Student', value: 'Student' },
      { label: 'Instructor', value: 'Instructor' },
      { label: 'Admin', value: 'Admin' },
    ],
  },
  { name: 'status', label: 'Aktywny', type: 'checkbox' },
];

function Section({ title, description, children }: { title: string; description?: string; children: ReactNode }) {
  return (
    <section className="space-y-6">
      <div className="space-y-2">
        <h2 className="text-2xl font-semibold text-foreground">{title}</h2>
        {description && <p className="text-sm text-muted-foreground transition-colors dark:text-slate-400">{description}</p>}
      </div>
      {children}
    </section>
  );
}

export default function BrandbookPage() {
  const { showToast } = useToast();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [modalLoading, setModalLoading] = useState(false);
  const [formState, setFormState] = useState<Record<string, any> | null>(null);
  const [fieldShowcase, setFieldShowcase] = useState<FieldShowcaseState>({
    name: 'Anna Kowalska',
    email: 'anna@edu.io',
    password: 'Sekret!23',
    price: '89',
    description: 'Opis kursu pozwala zrozumieƒá zakres materia≈Çu.',
    role: 'Student',
    marketing: true,
    notifications: false,
    plan: 'standard',
    search: '',
    phone: '+48 123 456 789',
    pesel: '92051212345',
    brandColor: '#2563EB',
  });
  const [isStatusAlertVisible, setIsStatusAlertVisible] = useState(true);
  const [paginationPage, setPaginationPage] = useState(2);
  const [selectedChips, setSelectedChips] = useState<string[]>(['Design', 'UX']);
  const [activeFilters, setActiveFilters] = useState([
    { label: 'Kategoria: Frontend', count: 12 },
    { label: 'Cena < 99 z≈Ç', count: 5 },
  ]);
  const [visibleCoursesCount, setVisibleCoursesCount] = useState(3);
  const [loadingMore, setLoadingMore] = useState(false);
  const [selectedCourseSuggestion, setSelectedCourseSuggestion] = useState<AutocompleteOption | null>(null);
  const [selectedMentorSuggestion, setSelectedMentorSuggestion] = useState<AutocompleteOption | null>(null);
  const [asyncResults, setAsyncResults] = useState<AutocompleteOption[]>(courseSuggestions.slice(0, 4));
  const [autocompleteLoading, setAutocompleteLoading] = useState(false);
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedTime, setSelectedTime] = useState('');
  const [selectedDateTime, setSelectedDateTime] = useState('');
  const [knowledgeLevel, setKnowledgeLevel] = useState(60);
  const [activeStepperStep, setActiveStepperStep] = useState(1);
  const [priceRange, setPriceRange] = useState<[number, number]>([49, 199]);
  const [courseProgress, setCourseProgress] = useState(42);
  const [syncProgress, setSyncProgress] = useState(68);
  const [reviewStepperStep, setReviewStepperStep] = useState(0);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [activePerformanceTab, setActivePerformanceTab] = useState(performanceTabs[0]?.id ?? 'overview');
  const [activeInsightsTab, setActiveInsightsTab] = useState(insightsTabs[0]?.id ?? 'stats');
  const [resourceFilter, setResourceFilter] = useState<'all' | 'draft' | 'published'>('all');
  const [layoutMode, setLayoutMode] = useState<'grid' | 'list'>('grid');
  const [selectedUsers, setSelectedUsers] = useState<DemoUser[]>([]);
  const [calendarEvents, setCalendarEvents] = useState<CalendarEvent[]>(initialCalendarEvents);

  const asyncTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);

  const handleFieldShowcaseChange = <K extends keyof FieldShowcaseState>(
    key: K,
    value: FieldShowcaseState[K],
  ) => {
    setFieldShowcase((prev) => ({
      ...prev,
      [key]: value,
    }));
  };

  const handleModalConfirm = () => {
    setModalLoading(true);
    setTimeout(() => {
      showToast({
        title: 'Potwierdzono',
        description: 'Akcja zosta≈Ça zatwierdzona.',
        variant: 'success',
      });
      setModalLoading(false);
      setIsModalOpen(false);
    }, 1200);
  };

  const toggleChip = (chip: string) => {
    setSelectedChips((prev) =>
      prev.includes(chip) ? prev.filter((item) => item !== chip) : [...prev, chip],
    );
  };

  const removeFilter = (label: string) => {
    setActiveFilters((prev) => prev.filter((filter) => filter.label !== label));
  };

  const handleLoadMore = () => {
    setLoadingMore(true);
    setTimeout(() => {
      setVisibleCoursesCount((prev) => Math.min(prev + 3, demoCourses.length));
      setLoadingMore(false);
    }, 600);
  };

  const handleAsyncQuery = useCallback(
    (userQuery: string) => {
      if (asyncTimeoutRef.current) {
        clearTimeout(asyncTimeoutRef.current);
      }
      setAutocompleteLoading(true);
      asyncTimeoutRef.current = setTimeout(() => {
        const normalized = userQuery.toLowerCase();
        const results = normalized
          ? mentorSuggestions.filter((option) =>
              option.label.toLowerCase().includes(normalized) ||
              option.description?.toLowerCase().includes(normalized),
            )
          : mentorSuggestions;
        setAsyncResults(results);
        setAutocompleteLoading(false);
      }, 450);
    },
    [],
  );

  const handleFilesChange = useCallback(
    (files: File[]) => {
      setUploadedFiles(files);
      if (files.length === 0) {
        showToast({
          title: 'Brak plik√≥w',
          description: 'Wyczy≈õƒá pliki lub dodaj nowe, aby kontynuowaƒá.',
          variant: 'info',
        });
        return;
      }
      showToast({
        title: files.length > 1 ? 'Pliki dodane' : 'Plik dodany',
        description: files.map((file) => file.name).join(', '),
        variant: 'success',
      });
    },
    [showToast],
  );

  const handleClearFiles = useCallback(() => {
    setUploadedFiles([]);
    showToast({
      title: 'Wyczyszczono listƒô',
      description: 'Mo≈ºesz ponownie wybraƒá pliki do przes≈Çania.',
      variant: 'info',
    });
  }, [showToast]);

  const handleCalendarSlotCreate = useCallback(
    (start: Date, end: Date) => {
      const newEvent: CalendarEvent = {
        id: `draft-${Date.now()}`,
        title: 'Nowe spotkanie',
        start,
        end,
        category: 'meeting',
        location: 'Do ustalenia',
        description: 'Kliknij prawym przyciskiem aby edytowaƒá'
      };
      setCalendarEvents((prev) => [...prev, newEvent]);
      showToast({
        title: 'Dodano szkic wydarzenia',
        description: `${start.toLocaleDateString()} ‚Ä¢ ${start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`,
        variant: 'info',
      });
    },
    [showToast],
  );

  const handleCalendarEventClick = useCallback(
    (event: CalendarEvent) => {
      showToast({
        title: event.title,
        description: `${event.location ?? 'Spotkanie online'} ‚Ä¢ ${event.start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}‚Äì${event.end.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`,
        variant: 'success',
      });
    },
    [showToast],
  );

  const handleCalendarEventUpdate = useCallback(
    (eventId: string, updates: Partial<CalendarEvent>) => {
      setCalendarEvents((prev) =>
        prev.map((event) =>
          event.id === eventId ? { ...event, ...updates } : event
        )
      );
      showToast({
        title: 'Zaktualizowano wydarzenie',
        description: 'Zmiany zosta≈Çy zapisane',
        variant: 'success',
      });
    },
    [showToast],
  );

  const handleCalendarEventDelete = useCallback(
    (eventId: string) => {
      setCalendarEvents((prev) => prev.filter((event) => event.id !== eventId));
      showToast({
        title: 'Usuniƒôto wydarzenie',
        description: 'Wydarzenie zosta≈Ço trwale usuniƒôte',
        variant: 'info',
      });
    },
    [showToast],
  );

  const handleCalendarEventDuplicate = useCallback(
    (event: CalendarEvent) => {
      const duplicatedEvent: CalendarEvent = {
        ...event,
        id: `duplicate-${Date.now()}`,
        title: `${event.title} (kopia)`,
        start: new Date(event.start.getTime() + 24 * 60 * 60 * 1000), // +1 dzie≈Ñ
        end: new Date(event.end.getTime() + 24 * 60 * 60 * 1000), // +1 dzie≈Ñ
      };
      setCalendarEvents((prev) => [...prev, duplicatedEvent]);
      showToast({
        title: 'Zduplikowano wydarzenie',
        description: `Utworzono kopiƒô na ${duplicatedEvent.start.toLocaleDateString()}`,
        variant: 'success',
      });
    },
    [showToast],
  );

  useEffect(() => () => {
    if (asyncTimeoutRef.current) {
      clearTimeout(asyncTimeoutRef.current);
    }
  }, []);

  const contextMenuItems = useMemo(() =>
    resourceContextMenu.map((item) => ({
      ...item,
      onSelect: () =>
        showToast({
          title: item.label,
          description: `Akcja '${item.label}' zosta≈Ça wywo≈Çana`,
          variant: item.danger ? 'error' : 'info',
        }),
    })),
  [showToast]);

  const splitButtonItems = useMemo(() =>
    splitButtonOptions.map((option) => ({
      ...option,
      onSelect: () =>
        showToast({
          title: option.label,
          description: 'Dodano wpis przy u≈ºyciu menu przycisku.',
          variant: 'success',
        }),
    })),
  [showToast]);

  const summarizedRoles = useMemo(() => {
    return tableData.reduce<Record<string, number>>((acc, user) => {
      acc[user.role] = (acc[user.role] || 0) + 1;
      return acc;
    }, {});
  }, []);

  return (
    <div className="min-h-screen bg-muted/50 pb-24 transition-colors dark:bg-slate-950">
      <div className="relative isolate bg-gradient-to-br from-blue-50 via-white to-slate-100 transition-colors dark:from-slate-900 dark:via-slate-950 dark:to-slate-900">
        <div className="absolute inset-0 bg-grid-slate-100/40 [mask-image:radial-gradient(ellipse_at_center,white,transparent_65%)] dark:bg-slate-900/30" />
        <div className="relative mx-auto max-w-6xl px-6 py-16 lg:px-8">
          <div className="mb-8 flex justify-end">
            <ThemeToggle />
          </div>
          <div className="max-w-3xl space-y-6">
            <p className="text-xs font-semibold uppercase tracking-[0.2em] text-blue-600">Brandbook</p>
            <h1 className="text-4xl font-bold tracking-tight text-foreground sm:text-5xl">
              System projektowy EduPlatform
            </h1>
            <p className="text-lg text-muted-foreground">
              Przewodnik po to≈ºsamo≈õci wizualnej, komponentach UI i zachowaniach interaktywnych naszej platformy.
              Ka≈ºdy element posiada ≈ºywy przyk≈Çad oraz wskaz√≥wki implementacyjne.
            </p>
            <div className="flex flex-wrap gap-3">
              <Button
                onClick={() =>
                  showToast({
                    title: 'Brandbook za≈Çadowany',
                    description: 'Mo≈ºesz testowaƒá komponenty w czasie rzeczywistym.',
                    variant: 'info',
                  })
                }
                className="bg-blue-600 text-white hover:bg-blue-700"
              >
                Poka≈º toast kontrolny
              </Button>
              <Button
                variant="secondary"
                className="border border-blue-100 bg-card text-blue-600 hover:bg-blue-50"
                onClick={() => setIsModalOpen(true)}
              >
                Otw√≥rz demo modala
              </Button>
              <Button
                variant="outline"
                className="border-border text-foreground hover:bg-slate-100"
                onClick={() => window.open('/components', '_blank')}
              >
                Katalog komponent√≥w <ExternalLink className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="mx-auto mt-16 max-w-6xl space-y-16 px-6 lg:px-8">
        <Section
          title="Paleta kolor√≥w"
          description="Fundamentalne kolory wykorzystywane w interfejsie u≈ºytkownika. Zachowujemy wysoki kontrast oraz konsekwencjƒô w u≈ºyciu."
        >
          <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
            {palette.map((color) => (
              <Card key={color.name} className="border border-border">
                <div className="h-24 rounded-t-lg" style={{ backgroundColor: color.value }} />
                <CardHeader className="pb-2">
                  <CardTitle className="text-base text-foreground">{color.name}</CardTitle>
                  <CardDescription className="text-xs text-muted-foreground">{color.usage}</CardDescription>
                </CardHeader>
                <CardFooter>
                  <span className="text-sm font-mono text-muted-foreground">{color.value}</span>
                </CardFooter>
              </Card>
            ))}
          </div>
        </Section>

        <Section
          title="Integracja z Tailwind"
          description="Ujednolicona konfiguracja temat√≥w pozwala komponentom shadcn i customowym blokom korzystaƒá z identycznej palety."
        >
          <div className="space-y-4 rounded-2xl border border-border bg-card p-6 shadow-sm">
            <p className="text-sm text-muted-foreground">
              Poni≈ºej proponowane rozszerzenia <code>tailwind.config.js</code>; mapujƒÖ one odcienie z brandbooka na skr√≥cone
              nazwy (`primary`, `warning`, `muted`). Po edycji uruchom ponownie proces buildu, aby Tailwind przebudowa≈Ç klasy,
              a w komponentach shadcn zacznij u≈ºywaƒá par <code>bg-*-</code> i <code>text-*-foreground</code>, np.
              <code>className=&quot;bg-primary text-primary-foreground&quot;</code>.
            </p>
            <pre className="overflow-auto rounded-lg bg-slate-900 px-4 py-3 text-xs text-slate-100">
{`// tailwind.config.js
module.exports = {
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
      colors: {
        background: '#F8FAFC',
        foreground: '#0F172A',
        primary: {
          DEFAULT: '#2563EB',
          foreground: '#F8FAFC',
          50: '#EFF6FF',
          100: '#DBEAFE',
          600: '#2563EB',
          700: '#1D4ED8',
        },
        secondary: {
          DEFAULT: '#334155',
          foreground: '#F1F5F9',
        },
        accent: {
          DEFAULT: '#E0F2FE',
          foreground: '#0F172A',
        },
        success: {
          DEFAULT: '#10B981',
          foreground: '#F0FDF4',
        },
        warning: {
          DEFAULT: '#F59E0B',
          foreground: '#FFFBEB',
        },
        danger: {
          DEFAULT: '#F43F5E',
          foreground: '#FEF2F2',
        },
        muted: {
          DEFAULT: '#CBD5F5',
          foreground: '#475569',
        },
        card: '#FFFFFF',
      },
      borderRadius: {
        xl: '1rem',
        '2xl': '1.25rem',
      },
      boxShadow: {
        panel: '0 30px 60px -25px rgba(15, 23, 42, 0.25)',
      },
    },
  },
};`}
            </pre>
            <p className="text-xs text-muted-foreground">
              Po zapisaniu konfiguracji zrestartuj serwer deweloperski lub ponownie uruchom <code>npm run dev</code>, aby
              wygenerowaƒá klasy i uniknƒÖƒá b≈Çƒôd√≥w typu ‚Äúunknown variant‚Äù.
            </p>
          </div>
        </Section>

        <Section title="Typografia" description="Inter wykorzystujemy jako podstawowy kr√≥j w ca≈Çym ekosystemie.">
          <div className="space-y-4 rounded-2xl border border-border bg-card p-8 shadow-sm">
            {typographySamples.map((sample) => (
              <div key={sample.label} className="space-y-1">
                <p className="text-xs font-semibold uppercase tracking-wide text-blue-500">{sample.label}</p>
                <p className={sample.className}>{sample.sample}</p>
              </div>
            ))}
          </div>
        </Section>

        <Section
          title="Przyciski"
          description="Warianty Button bazujƒÖ na komponentach shadcn. Mo≈ºemy nadpisywaƒá klasƒô, aby dopasowaƒá do brandingu."
        >
          <div className="grid gap-4 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Podstawowe warianty</CardTitle>
                <CardDescription>Poni≈ºej warianty najczƒô≈õciej stosowane w marketingu i panelu admina.</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-wrap gap-3">
                <Button className="bg-blue-600 text-white hover:bg-blue-700">Primary</Button>
                <Button variant="secondary" className="bg-slate-800 text-white hover:bg-slate-900">
                  Secondary
                </Button>
                <Button variant="outline" className="border-border text-foreground hover:bg-slate-100">
                  Outline
                </Button>
                <Button variant="ghost" className="hover:bg-slate-100 text-foreground">
                  Ghost
                </Button>
                <Button variant="destructive" className="bg-rose-500 text-white hover:bg-rose-600">
                  Destructive
                </Button>
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Akcje globalne</CardTitle>
                <CardDescription>Przyk≈Çady wykorzystania przycisk√≥w do wyzwalania kontroler√≥w modal i toast.</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col items-start gap-3">
                <Button
                  className="bg-emerald-600 text-white hover:bg-emerald-700"
                  onClick={() =>
                    showToast({
                      title: 'U≈ºytkownik zapisany',
                      description: 'Dane zosta≈Çy poprawnie utrwalone.',
                      variant: 'success',
                    })
                  }
                >
                  Poka≈º toast sukcesu
                </Button>
                <Button
                  variant="outline"
                  className="border-rose-300 text-rose-600 hover:bg-rose-50"
                  onClick={() =>
                    showToast({
                      title: 'Nie uda≈Ço siƒô zapisaƒá',
                      description: 'Sprawd≈∫ po≈ÇƒÖczenie z API i spr√≥buj ponownie.',
                      variant: 'error',
                    })
                  }
                >
                  Poka≈º toast b≈Çƒôdu
                </Button>
                <Button className="bg-indigo-600 text-white hover:bg-indigo-700" onClick={() => setIsModalOpen(true)}>
                  Otw√≥rz modal potwierdzajƒÖcy
                </Button>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Komponenty marketingowe"
          description="Zestaw gotowych blok√≥w wykorzystywanych na stronie publicznej."
        >
          <div className="space-y-10">
            <ComponentShowcase
              title="Hero + Navigation"
              description="G≈Ç√≥wna sekcja landing page z nawigacjƒÖ, CTA i obrazem hero"
              code={`<Navigation
  navItems={[
    { name: 'Home', href: '#' },
    { name: 'Katalog', href: '#courses' },
    { name: 'Brandbook', href: '/brandbook' }
  ]}
  ctaText="Do≈ÇƒÖcz"
/>

<Hero
  title="Zbuduj kulturƒô ciƒÖg≈Çego rozwoju"
  subtitle="Nowoczesne kursy, live session i spo≈Çeczno≈õƒá ekspert√≥w."
  ctaText="Przetestuj platformƒô"
  ctaAction={() => handleAction()}
  secondaryCtaText="Zobacz wideo"
  secondaryCtaAction={() => setIsModalOpen(true)}
  imageUrl="/images/hero-edu.svg"
  altText="Hero EduPlatform"
/>`}
            >
              <div className="overflow-hidden rounded-3xl border border-border bg-card shadow-sm">
                <Navigation navItems={[{ name: 'Home', href: '#' }, { name: 'Katalog', href: '#courses' }, { name: 'Brandbook', href: '/brandbook' }]} ctaText="Do≈ÇƒÖcz" />
                <Hero
                  title="Zbuduj kulturƒô ciƒÖg≈Çego rozwoju"
                  subtitle="Nowoczesne kursy, live session i spo≈Çeczno≈õƒá ekspert√≥w ‚Äî wszystko w jednym miejscu."
                  ctaText="Przetestuj platformƒô"
                  ctaAction={() =>
                    showToast({
                      title: 'Demo hero',
                      description: 'CTA w hero mo≈ºe prowadziƒá do darmowego triala.',
                      variant: 'info',
                    })
                  }
                  secondaryCtaText="Zobacz wideo"
                  secondaryCtaAction={() => setIsModalOpen(true)}
                  imageUrl="/images/hero-edu.svg"
                  altText="Hero EduPlatform"
                />
              </div>
            </ComponentShowcase>

            <ComponentShowcase
              title="Bloki informacyjne"
              description="Statystyki i funkcje u≈ºyte do budowania zaufania u≈ºytkownik√≥w"
              variants={[
                {
                  name: 'Stats',
                  code: `const stats = [
  { number: '50K+', label: 'Aktywnych student√≥w' },
  { number: '200+', label: 'Kurs√≥w premium' },
  { number: '98%', label: 'Satysfakcji' },
  { number: '24/7', label: 'Wsparcia' },
];

<Stats stats={stats} />`,
                  component: <Stats stats={marketingStats} />
                },
                {
                  name: 'Features',
                  code: `const features = [
  {
    title: 'Eksperci bran≈ºowi',
    description: 'Zajƒôcia prowadzone przez lider√≥w rynku.',
    icon: 'üéì'
  },
  {
    title: 'Elastyczne ≈õcie≈ºki',
    description: '≈ÅƒÖcz modu≈Çy kurs√≥w, aby tworzyƒá w≈Çasne ≈õcie≈ºki.',
    icon: 'üß≠'
  },
  // ...
];

<Features features={features} />`,
                  component: <Features features={marketingFeatures} />
                }
              ]}
            />

            <ComponentShowcase
              title="Testimonial Slider"
              description="Karuzela opinii z interaktywnƒÖ nawigacjƒÖ"
              code={`const testimonials = [
  {
    id: 1,
    name: 'Katarzyna W.',
    role: 'Product Designer',
    content: 'Platforma pozwoli≈Ça mi szybko przeszkoliƒá zesp√≥≈Ç...',
    rating: 5
  },
  // ...wiƒôcej opinii
];

<TestimonialSlider testimonials={testimonials} />`}
            >
              <TestimonialSlider testimonials={testimonials} />
            </ComponentShowcase>

            <ComponentShowcase
              title="Karty kurs√≥w"
              description="Przyk≈Çadowe kursy prezentowane w siatce 3 kolumnowej"
              code={`const course = {
  id: 1,
  title: 'React dla zespo≈Ç√≥w',
  instructor: 'Pawe≈Ç Kowalski',
  rating: 4.9,
  students: 1320,
  image: '/api/placeholder/400/225',
  price: 89,
  category: 'Frontend'
};

<div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
  {demoCourses.map((course) => (
    <CourseCard key={course.id} course={course} />
  ))}
</div>`}
            >
              <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                {demoCourses.map((course) => (
                  <CourseCard key={course.id} course={course} />
                ))}
              </div>
            </ComponentShowcase>

            <ComponentShowcase
              title="Call to Action (CTA)"
              description="Sekcja zachƒôcajƒÖca do dzia≈Çania z dwoma przyciskami i wyborem koloru t≈Ça"
              code={`<CTA
  title="Zacznij onboardowaƒá sw√≥j zesp√≥≈Ç"
  subtitle="Skorzystaj z darmowych 14 dni..."
  primaryButtonText="Rozpocznij darmowy okres"
  primaryButtonAction={() => {
    // Akcja g≈Ç√≥wnego przycisku
  }}
  secondaryButtonText="Um√≥w demo"
  secondaryButtonAction={() => {
    // Akcja drugiego przycisku
  }}
  bgColor="blue"
/>`}
            >
              <CTA
                title="Zacznij onboardowaƒá sw√≥j zesp√≥≈Ç"
                subtitle="Skorzystaj z darmowych 14 dni i odkryj pe≈Çne mo≈ºliwo≈õci EduPlatform."
                primaryButtonText="Rozpocznij darmowy okres"
                primaryButtonAction={() =>
                  showToast({
                    title: 'Start okresu pr√≥bnego',
                    description: 'Skontaktujemy siƒô z TobƒÖ w ciƒÖgu 24 godzin.',
                    variant: 'success',
                  })
                }
                secondaryButtonText="Um√≥w demo"
                secondaryButtonAction={() => setIsModalOpen(true)}
                bgColor="blue"
              />
            </ComponentShowcase>
          </div>
        </Section>

        <Section
          title="Pola formularzy"
          description="Nowe komponenty formularzy dostƒôpne w bibliotece frontendu. ZachowujƒÖ jednolite stany, pomoc i komunikaty b≈Çƒôd√≥w."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Pola tekstowe</CardTitle>
                <CardDescription>Warianty pojedynczej linii, pola has≈Ça, liczby oraz textarea z helperami.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <form onSubmit={(e) => e.preventDefault()} className="space-y-4">
                  <TextField
                    id="showcase-name"
                    label="Imiƒô i nazwisko"
                    placeholder="Wpisz imiƒô i nazwisko"
                    helperText="Pos≈Çuguj siƒô pe≈Çnymi danymi u≈ºytkownika."
                    value={fieldShowcase.name}
                    onChange={(event) =>
                      handleFieldShowcaseChange('name', event.target.value)
                    }
                  />
                  <TextField
                    id="showcase-email"
                    type="email"
                    label="Email"
                    placeholder="uzytkownik@edu.io"
                    helperText="Adres wykorzystywany do logowania oraz powiadomie≈Ñ."
                    value={fieldShowcase.email}
                    onChange={(event) =>
                      handleFieldShowcaseChange('email', event.target.value)
                    }
                  />
                  <PasswordField
                    id="showcase-password"
                    label="Has≈Ço"
                    helperText="Has≈Ço musi mieƒá min. 8 znak√≥w, w tym cyfrƒô i znak specjalny."
                    value={fieldShowcase.password}
                    onChange={(event) =>
                      handleFieldShowcaseChange('password', event.target.value)
                    }
                  />
                <NumberField
                  id="showcase-price"
                  label="Cena kursu"
                  helperText="Warto≈õƒá netto w PLN."
                  min="0"
                  step="1"
                  value={fieldShowcase.price}
                  onChange={(event) =>
                    handleFieldShowcaseChange('price', event.target.value)
                  }
                />
                <ColorPickerField
                  id="showcase-brand-color"
                  label="Kolor przewodni"
                  helperText="S≈Çu≈ºy do personalizacji hero, CTA i wykres√≥w."
                  value={fieldShowcase.brandColor}
                  onChange={(event) =>
                    handleFieldShowcaseChange('brandColor', event.target.value)
                  }
                />
                <InputMaskField
                  id="showcase-phone"
                  label="Telefon kontaktowy"
                  helperText="Maska kontroluje format numeru, dziƒôki czemu eksporty CSV zachowujƒÖ sp√≥jno≈õƒá."
                  mask="+## ### ### ###"
                  value={fieldShowcase.phone}
                  onMaskedValueChange={(masked) =>
                    handleFieldShowcaseChange('phone', masked)
                  }
                />
                <InputMaskField
                  id="showcase-pesel"
                  label="PESEL uczestnika"
                  helperText="11 cyfr ‚Äì maska blokuje wprowadzanie liter oraz dodatkowych znak√≥w."
                  mask="###########"
                  value={fieldShowcase.pesel}
                  onMaskedValueChange={(masked) =>
                    handleFieldShowcaseChange('pesel', masked)
                  }
                />
                  <TextareaField
                    id="showcase-description"
                    label="Opis kursu"
                    helperText="Kr√≥tko przedstaw korzy≈õci. Pole wspiera stany b≈Çƒôd√≥w i dowolnƒÖ wysoko≈õƒá."
                    value={fieldShowcase.description}
                    onChange={(event) =>
                      handleFieldShowcaseChange('description', event.target.value)
                    }
                  />
                </form>
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Pola wyboru</CardTitle>
                <CardDescription>Komponenty wyboru pojedynczego i wielokrotnego z obs≈ÇugƒÖ stan√≥w i fokus√≥w.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <SelectField
                  id="showcase-role"
                  label="Rola u≈ºytkownika"
                  helperText="Wp≈Çywa na uprawnienia w panelu."
                  value={fieldShowcase.role}
                  onChange={(event) =>
                    handleFieldShowcaseChange('role', event.target.value)
                  }
                  options={[
                    { label: 'Student', value: 'Student' },
                    { label: 'Instructor', value: 'Instructor' },
                    { label: 'Admin', value: 'Admin' },
                  ]}
                />
                <RadioGroupField
                  name="showcase-plan"
                  label="Plan subskrypcji"
                  helperText="Wybierz plan najlepiej dopasowany do zespo≈Çu."
                  value={fieldShowcase.plan}
                  orientation="horizontal"
                  options={[
                    { label: 'Basic', value: 'basic' },
                    { label: 'Standard', value: 'standard' },
                    { label: 'Premium', value: 'premium' },
                  ]}
                  onChange={(value) =>
                    handleFieldShowcaseChange('plan', value)
                  }
                />
                <CheckboxField
                  id="showcase-marketing"
                  label="Zgoda marketingowa"
                  description="Pozwala wysy≈Çaƒá nowo≈õci produktowe."
                  helperText="Wymagana przy wysy≈Çce newslettera."
                  checked={fieldShowcase.marketing}
                  onCheckedChange={(checked) =>
                    handleFieldShowcaseChange('marketing', checked)
                  }
                />
                <SwitchField
                  id="showcase-notifications"
                  label="Powiadomienia push"
                  description="Szybkie przypomnienia o wa≈ºnych wydarzeniach."
                  checked={fieldShowcase.notifications}
                  onCheckedChange={(checked) =>
                    handleFieldShowcaseChange('notifications', checked)
                  }
                />
                <SearchField
                  id="showcase-search"
                  placeholder="Szukaj kurs√≥w lub instruktor√≥w‚Ä¶"
                  helperText="Wspiera skr√≥ty klawiszowe oraz stany b≈Çƒôd√≥w."
                  value={fieldShowcase.search}
                  onChange={(event) =>
                    handleFieldShowcaseChange('search', event.target.value)
                  }
                />
              </CardContent>
              <CardFooter>
                <pre className="w-full overflow-x-auto rounded-lg bg-slate-900 px-3 py-2 text-xs text-slate-100">
{JSON.stringify(
  {
    role: fieldShowcase.role,
    plan: fieldShowcase.plan,
    marketing: fieldShowcase.marketing,
    notifications: fieldShowcase.notifications,
    search: fieldShowcase.search,
    brandColor: fieldShowcase.brandColor,
  },
  null,
  2,
)}
                </pre>
              </CardFooter>
            </Card>
          </div>
        </Section>

        <Section
          title="≈Åadowanie plik√≥w"
          description="Sp√≥jny komponent uploadu obs≈Çuguje drag & drop, limit rozmiaru oraz podglƒÖd wybranych plik√≥w."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Uploader zasob√≥w kursu</CardTitle>
                <CardDescription>Dodaj materia≈Çy PDF lub grafiki promocyjne. Komponent informuje o limitach i b≈Çƒôdach.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <FileUploader
                  label="Materia≈Çy do modu≈Çu"
                  description="Wspierane formaty: PDF, PNG, JPG. Maksymalnie 10 MB na plik."
                  helperText="Po dodaniu plik√≥w kliknij ‚ÄûWy≈õlij do biblioteki‚Äù, aby zainicjowaƒá upload do API."
                  accept=".pdf,image/png,image/jpeg"
                  multiple
                  maxSizeMB={10}
                  value={uploadedFiles}
                  onFilesChange={handleFilesChange}
                />
                <div className="flex gap-3">
                  <Button
                    type="button"
                    onClick={() =>
                      showToast({
                        title: 'Upload symulowany',
                        description: uploadedFiles.length
                          ? `Wys≈Çano ${uploadedFiles.length} plik√≥w do kolejki.`
                          : 'Brak plik√≥w do przes≈Çania.',
                        variant: uploadedFiles.length ? 'success' : 'warning',
                      })
                    }
                    disabled={uploadedFiles.length === 0}
                  >
                    Wy≈õlij do biblioteki
                  </Button>
                  <Button
                    type="button"
                    variant="secondary"
                    onClick={handleClearFiles}
                    disabled={uploadedFiles.length === 0}
                  >
                    Wyczy≈õƒá listƒô
                  </Button>
                </div>
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Wytyczne produktowe</CardTitle>
                <CardDescription>Najwa≈ºniejsze zasady projektowe dla uploadu plik√≥w w panelu administracyjnym.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3 text-sm text-muted-foreground">
                <ul className="space-y-2">
                  <li>‚Ä¢ Drag & drop i przycisk akcji zawsze wsp√≥≈ÇistniejƒÖ, aby zachowaƒá dostƒôpno≈õƒá.</li>
                  <li>‚Ä¢ B≈Çƒôdy walidacji (limit rozmiaru, format) pojawiajƒÖ siƒô pod strefƒÖ drop wraz z listƒÖ odrzuconych plik√≥w.</li>
                  <li>‚Ä¢ Po dodaniu element√≥w wy≈õwietlamy ich nazwƒô oraz rozmiar; opcja ‚ÄûUsu≈Ñ‚Äù jest zawsze dostƒôpna.</li>
                  <li>‚Ä¢ W uploadzie krokowym stosujemy toast potwierdzajƒÖcy sukces, a w tle wysy≈Çamy dane asynchronicznie.</li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Autocomplete"
          description="Pole typu typeahead z filtrowaniem lokalnym i zdalnym."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Statyczna lista kurs√≥w</CardTitle>
                <CardDescription>Filtruje dane lokalnie, pozwala wybraƒá kurs i zapisuje wynik.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <Autocomplete
                  options={courseSuggestions}
                  placeholder="Szukaj kursu‚Ä¶"
                  onOptionSelect={(option) => {
                    setSelectedCourseSuggestion(option);
                    showToast({
                      title: 'Wybrano kurs',
                      description: option.label,
                      variant: 'success',
                    });
                  }}
                />
                <p className="text-xs text-muted-foreground">
                  {selectedCourseSuggestion
                    ? `Wybrano: ${selectedCourseSuggestion.label}`
                    : 'Nie wybrano kursu.'}
                </p>
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Podpowiedzi asynchroniczne</CardTitle>
                <CardDescription>Symuluje zapytanie do API ‚Äì spinner informuje o ≈Çadowaniu.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <Autocomplete
                  options={asyncResults}
                  placeholder="Szukaj mentora‚Ä¶"
                  onOptionSelect={(option) => setSelectedMentorSuggestion(option)}
                  onQueryChange={handleAsyncQuery}
                  loading={autocompleteLoading}
                  emptyMessage="Brak mentor√≥w spe≈ÇniajƒÖcych kryteria."
                />
                <p className="text-xs text-muted-foreground">
                  {selectedMentorSuggestion
                    ? `Mentor: ${selectedMentorSuggestion.label}`
                    : 'Wybierz mentora z listy.'}
                </p>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Suwak (Slider)"
          description="Regulacja warto≈õci liczbowych ‚Äì np. poziomu zaawansowania lub intensywno≈õci programu."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Poziom zaawansowania kursu</CardTitle>
                <CardDescription>Ustaw procent wiedzy wymagany do udzia≈Çu w warsztatach.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <Slider
                  min={0}
                  max={100}
                  step={5}
                  value={knowledgeLevel}
                  onValueChange={(value) => setKnowledgeLevel(value)}
                />
                <p className="text-xs text-muted-foreground">
                  Aktualny poziom: <span className="font-semibold text-foreground">{knowledgeLevel}%</span> ‚Äì uczestnik powinien znaƒá podstawy JavaScriptu i Reacta.
                </p>
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Zakres cenowy</CardTitle>
                <CardDescription>RangeSlider pozwala filtrowaƒá katalog kurs√≥w po bud≈ºecie.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <RangeSlider
                  min={0}
                  max={500}
                  step={5}
                  value={priceRange}
                  minDistance={20}
                  onValueChange={(value) => setPriceRange(value)}
                />
                <p className="text-xs text-muted-foreground">
                  Pokazywane kursy z przedzia≈Çu{' '}
                  <span className="font-semibold text-foreground">
                    {priceRange[0]}‚Äì{priceRange[1]} z≈Ç
                  </span>
                  . Filtr zachowuje minimalny odstƒôp 20 z≈Ç miƒôdzy skrajnymi warto≈õciami.
                </p>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Kontrolki dat i czasu"
          description="Komponenty input√≥w daty, czasu i daty z godzinƒÖ ‚Äì sp√≥jnie wystylizowane z formularzami."
        >
          <div className="grid gap-6 lg:grid-cols-3">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Data</CardTitle>
                <CardDescription>Wybierz termin ods≈Çony kursu.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <DatePicker
                  value={selectedDate}
                  onChange={(event) => setSelectedDate(event.target.value)}
                />
                <p className="text-xs text-muted-foreground">
                  {selectedDate ? `Wybrana data: ${selectedDate}` : 'Nie wybrano daty.'}
                </p>
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Godzina</CardTitle>
                <CardDescription>Planowanie webinaru lub spotkania live.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <TimePicker
                  value={selectedTime}
                  onChange={(event) => setSelectedTime(event.target.value)}
                />
                <p className="text-xs text-muted-foreground">
                  {selectedTime ? `Wybrana godzina: ${selectedTime}` : 'Nie wybrano godziny.'}
                </p>
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Data i godzina</CardTitle>
                <CardDescription>Idealne do ustalenia terminu startu kursu.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                <DateTimePicker
                  value={selectedDateTime}
                  onChange={(event) => setSelectedDateTime(event.target.value)}
                />
                <p className="text-xs text-muted-foreground">
                  {selectedDateTime ? `Start: ${selectedDateTime}` : 'Nie wybrano daty startu.'}
                </p>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Step-by-step (Stepper)"
          description="Wizualizuje postƒôp w wieloetapowych procesach konfiguracji."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Onboarding nowego kursu</CardTitle>
                <CardDescription>Rozbudowany stepper prezentuje szczeg√≥≈Çy kroku w panelu poni≈ºej.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Stepper
                  steps={onboardingSteps}
                  activeStep={activeStepperStep}
                  onStepChange={(step) => setActiveStepperStep(step)}
                />
                <div className="flex items-center justify-between text-xs text-muted-foreground">
                  <span>
                    Aktualny krok: <span className="font-semibold text-foreground">{onboardingSteps[activeStepperStep]?.title}</span>
                  </span>
                  <Button
                    size="sm"
                    variant="secondary"
                    onClick={() =>
                      setActiveStepperStep((prev) =>
                        prev + 1 < onboardingSteps.length ? prev + 1 : 0,
                      )
                    }
                  >
                    Nastƒôpny etap
                  </Button>
                </div>
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>PrzeglƒÖd jako≈õciowy</CardTitle>
                <CardDescription>Wariant pionowy z rƒôcznie ustawionymi statusami ‚Äì podkre≈õla etapy review.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Stepper
                  steps={reviewWorkflowSteps}
                  activeStep={reviewStepperStep}
                  orientation="vertical"
                  showStepContent={true}
                  onStepChange={(step) => setReviewStepperStep(step)}
                />
                <p className="text-xs text-muted-foreground">
                  Etap <span className="font-semibold text-foreground">{reviewWorkflowSteps[reviewStepperStep]?.title}</span> ‚Äî {reviewWorkflowSteps[reviewStepperStep]?.meta}.
                </p>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Akordeon"
          description="PorzƒÖdkuje rozbudowane tre≈õci ‚Äì np. dokumentacjƒô, polityki lub FAQ w panelu."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Centrum wiedzy</CardTitle>
                <CardDescription>Zastosowanie w sekcji pomocy administratora ‚Äì ka≈ºdy modu≈Ç zawiera skr√≥cone zasady.</CardDescription>
              </CardHeader>
              <CardContent>
                <Accordion
                  items={accordionItems}
                  defaultExpandedIds={['governance']}
                  allowMultiple
                />
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Wytyczne projektowe</CardTitle>
                <CardDescription>Stosuj akordeon do tre≈õci, kt√≥re wymagajƒÖ skupienia ‚Äì unikaj zagnie≈ºd≈ºonych akordeon√≥w.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3 text-sm text-muted-foreground">
                <ul className="list-disc space-y-2 pl-5">
                  <li>Upewnij siƒô, ≈ºe nag≈Ç√≥wki akordeonu w pe≈Çni opisujƒÖ zawarto≈õƒá sekcji.</li>
                  <li>Przy d≈Çu≈ºszych blokach tekstu dodaj link ‚ÄûWiƒôcej‚Äù prowadzƒÖcy do pe≈Çnej dokumentacji.</li>
                  <li>W przypadku b≈Çƒôd√≥w formularza ‚Äì rozwi≈Ñ automatycznie sekcjƒô, w kt√≥rej znajduje siƒô invalid field.</li>
                </ul>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Zak≈Çadki (Tabs)"
          description="UsprawniajƒÖ prze≈ÇƒÖczanie widok√≥w r√≥wnorzƒôdnych ‚Äì dashboardy, raporty czy analitykƒô."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Dashboard kierowniczy</CardTitle>
                <CardDescription>G≈Ç√≥wne zak≈Çadki ≈ÇƒÖczƒÖ ikony i badge, aby podkre≈õliƒá wa≈ºne zmiany.</CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs
                  tabs={performanceTabs}
                  value={activePerformanceTab}
                  onValueChange={setActivePerformanceTab}
                  fitted
                />
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Insights zespo≈Çu produktu</CardTitle>
                <CardDescription>Wariant pionowy nadaje siƒô do paneli bocznych i stron ustawie≈Ñ.</CardDescription>
              </CardHeader>
              <CardContent>
                <Tabs
                  tabs={insightsTabs}
                  value={activeInsightsTab}
                  onValueChange={setActiveInsightsTab}
                  orientation="vertical"
                />
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Siatka uk≈Çadu"
          description="LayoutGrid porzƒÖdkuje sekcje w responsywne kolumny ‚Äì przydatne w dashboardach, stronach raportowych i overview."
        >
          <LayoutGrid columns={{ base: 1, md: 2 }} gap="lg">
            <LayoutSection
              title="Planowanie programu"
              description="Najwa≈ºniejsze bloki konfiguracji kursu z przyciskami szybkiego dostƒôpu."
              actions={
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() =>
                    showToast({
                      title: 'Dodano modu≈Ç',
                      description: 'Nowy modu≈Ç zosta≈Ç dodany do planu kursu.',
                      variant: 'success',
                    })
                  }
                >
                  Dodaj modu≈Ç
                </Button>
              }
            >
              <List
                variant="check"
                items={[
                  'Zdefiniuj cele edukacyjne i czas trwania',
                  'Przypisz mentor√≥w i konsultacje live',
                  'Ustal materia≈Çy do pobrania i quizy',
                ]}
              />
            </LayoutSection>
            <LayoutSection
              title="Metryki opublikowanych kurs√≥w"
              description="Szybki wglƒÖd w liczbƒô aktywnych uczestnik√≥w, uko≈Ñczonych modu≈Ç√≥w i ≈õredniƒÖ ocen."
            >
              <LayoutGrid columns={{ base: 1, sm: 2 }} gap="sm">
                <StatCard
                  label="Aktywni uczestnicy"
                  value="2 430"
                  trend={12.4}
                  description="Wzrost w ostatnim kwartale."
                />
                <StatCard
                  label="≈örednia ocena"
                  value="4.8/5"
                  trend={0.6}
                  description="Na podstawie 1 120 opinii kursant√≥w."
                />
              </LayoutGrid>
            </LayoutSection>
          </LayoutGrid>
        </Section>

        <Section
          title="Listy"
          description="Sp√≥jne zachowanie wypunktowa≈Ñ w panelu ‚Äì listy standardowe, numerowane i checklisty do komunikowania krok√≥w."
        >
          <div className="grid gap-6 lg:grid-cols-3">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Lista standardowa</CardTitle>
                <CardDescription>Polecana do kr√≥tkich list korzy≈õci lub wymaga≈Ñ.</CardDescription>
              </CardHeader>
              <CardContent>
                <List
                  items={[
                    'Dostƒôp do 200+ kurs√≥w specjalistycznych.',
                    'Modu≈Çy na ≈ºywo z mentorem.',
                    'Certyfikaty potwierdzajƒÖce uko≈Ñczenie.',
                  ]}
                />
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Lista numerowana</CardTitle>
                <CardDescription>Idealna do proces√≥w i sekwencyjnych instrukcji.</CardDescription>
              </CardHeader>
              <CardContent>
                <List
                  variant="ordered"
                  items={[
                    'Zbierz wymagania od w≈Ça≈õciciela programu.',
                    'Zaprojektuj strukturƒô modu≈Ç√≥w i quiz√≥w.',
                    'Przeka≈º kurs do weryfikacji compliance.',
                  ]}
                />
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Checklisty zatwierdze≈Ñ</CardTitle>
                <CardDescription>Podkre≈õla wykonane kroki ‚Äì wykorzystuje ikonƒô sukcesu.</CardDescription>
              </CardHeader>
              <CardContent>
                <List
                  variant="check"
                  markerColor="text-emerald-500"
                  items={[
                    'Materia≈Çy wideo sprawdzone przez QA.',
                    'Quiz ko≈Ñcowy uzupe≈Çniony o feedback.',
                    'Opis sprzeda≈ºowy zaakceptowany przez marketing.',
                  ]}
                />
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Karty KPI / Statystyki"
          description="StatCard wizualizuje kluczowe liczby, trendy i kr√≥tkie komentarze ‚Äì stosuj w dashboardach kierowniczych."
        >
          <div className="grid gap-6 lg:grid-cols-3">
            <StatCard
              label="Przych√≥d MRR"
              value="128 400 z≈Ç"
              trend={8.3}
              description="Wzrost miesiƒÖc do miesiƒÖca dziƒôki planom premium."
              icon={<DollarSign className="h-5 w-5" />}
            />
            <StatCard
              label="Retencja 30-dniowa"
              value="87%"
              trend={-2.1}
              description="Spadek spowodowany sezonem urlopowym ‚Äì monitoruj cohorty."
              icon={<ShieldCheck className="h-5 w-5" />}
            />
            <StatCard
              label="≈öredni czas uko≈Ñczenia"
              value="6 h 20 min"
              trend={0}
              trendLabel="Bez zmian"
              description="Cele spe≈ÇniajƒÖ rekomendacje L&D dla kurs√≥w blended."
              icon={<Clock className="h-5 w-5" />}
            />
          </div>
        </Section>

        <Section
          title="Toolbar"
          description="Pasek narzƒôdzi ≈ÇƒÖczy akcje kontekstowe i filtry ‚Äì idealny dla list zasob√≥w oraz widok√≥w bulk actions."
        >
          <Card className="border border-border">
            <CardHeader>
              <CardTitle>ZarzƒÖdzanie kursami</CardTitle>
              <CardDescription>Toolbar reaguje na filtr, tryb widoku i pozwala na wywo≈Çanie akcji zbiorczych.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <Toolbar dense>
                <ToolbarGroup className="gap-1.5">
                  <Button
                    size="sm"
                    variant={resourceFilter === 'all' ? 'default' : 'secondary'}
                    onClick={() => setResourceFilter('all')}
                  >
                    Wszystkie
                  </Button>
                  <Button
                    size="sm"
                    variant={resourceFilter === 'published' ? 'default' : 'secondary'}
                    onClick={() => setResourceFilter('published')}
                  >
                    Opublikowane
                  </Button>
                  <Button
                    size="sm"
                    variant={resourceFilter === 'draft' ? 'default' : 'secondary'}
                    onClick={() => setResourceFilter('draft')}
                  >
                    Szkice
                  </Button>
                </ToolbarGroup>
                <ToolbarSeparator />
                <ToolbarGroup className="gap-1.5">
                  <Button
                    size="sm"
                    variant={layoutMode === 'grid' ? 'default' : 'secondary'}
                    onClick={() => setLayoutMode('grid')}
                  >
                    Siatka
                  </Button>
                  <Button
                    size="sm"
                    variant={layoutMode === 'list' ? 'default' : 'secondary'}
                    onClick={() => setLayoutMode('list')}
                  >
                    Lista
                  </Button>
                </ToolbarGroup>
                <ToolbarSeparator />
                <ToolbarGroup>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() =>
                      showToast({
                        title: 'Udostƒôpniono',
                        description: 'Wybrane kursy otrzyma≈Çy dostƒôp dla nowej grupy.',
                        variant: 'success',
                      })
                    }
                  >
                    Udostƒôpnij
                  </Button>
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() =>
                      showToast({
                        title: 'Eksport rozpoczƒôty',
                        description: 'Plik CSV pojawi siƒô w sekcji powiadomie≈Ñ po zako≈Ñczeniu.',
                        variant: 'info',
                      })
                    }
                  >
                    Eksportuj
                  </Button>
                  <Button
                    size="sm"
                    variant="destructive"
                    onClick={() =>
                      showToast({
                        title: 'Przeniesiono do archiwum',
                        description: '3 kursy zosta≈Çy oznaczone jako archived.',
                        variant: 'warning',
                      })
                    }
                  >
                    Archiwizuj
                  </Button>
                </ToolbarGroup>
              </Toolbar>
              <p className="text-xs text-muted-foreground">
                Widok: <span className="font-semibold text-foreground">{layoutMode === 'grid' ? 'Siatka' : 'Lista'}</span>, Filtr: <span className="font-semibold text-foreground">{resourceFilter === 'all' ? 'Wszystkie kursy' : resourceFilter === 'draft' ? 'Szkice' : 'Opublikowane'}</span>.
              </p>
            </CardContent>
          </Card>
        </Section>

        <Section
          title="Nag≈Ç√≥wki sekcji"
          description="SectionHeader zapewnia sp√≥jny wyglƒÖd nag≈Ç√≥wk√≥w sekcji z opcjonalnym eyebrowem i akcjami."
        >
          <Card className="border border-border">
            <CardHeader>
              <CardTitle>Przyk≈Çady zastosowania</CardTitle>
              <CardDescription>U≈ºywaj w dashboardach, listach raport√≥w oraz w dokumentacji UI, aby zachowaƒá konsekwentny rytm typografii.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <SectionHeader
                eyebrow="Raport tygodniowy"
                title="Stan realizacji OKR"
                description="Podsumowanie najwa≈ºniejszych inicjatyw wraz z mo≈ºliwo≈õciƒÖ eksportu szczeg√≥≈Ç√≥w."
                actions={
                  <Button
                    size="sm"
                    variant="secondary"
                    onClick={() =>
                      showToast({
                        title: 'Eksport OKR',
                        description: 'Raport zosta≈Ç dodany do kolejki eksport√≥w.',
                        variant: 'info',
                      })
                    }
                  >
                    Eksportuj
                  </Button>
                }
              />
              <SectionHeader
                align="center"
                title="Harmonogram wydarze≈Ñ"
                description="Prezentacja nadchodzƒÖcych webinar√≥w i warsztat√≥w w ujƒôciu miesiƒôcznym."
              />
              <SectionHeader
                align="right"
                eyebrow="Ankiety"
                title="Insight od uczestnik√≥w"
                description="Skup siƒô na trendach i wnioskach ‚Äì dane surowe dostƒôpne w zak≈Çadce ‚ÄûAnaliza‚Äù."
                actions={
                  <Button
                    size="sm"
                    onClick={() =>
                      showToast({
                        title: 'Dodano ankietƒô',
                        description: 'Nowa ankieta zosta≈Ça wys≈Çana do aktywnych kursant√≥w.',
                        variant: 'success',
                      })
                    }
                  >
                    Wy≈õlij ankietƒô
                  </Button>
                }
              />
            </CardContent>
          </Card>
        </Section>

        <Section
          title="Tooltip i Popover"
          description="Mikrointerakcje wspierajƒÖce odkrywanie funkcji i operacje kontekstowe."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Tooltip w tabeli wynik√≥w</CardTitle>
                <CardDescription>Dodatkowe wyja≈õnienie pojawia siƒô przy hooverze lub fokusem klawiatury.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center gap-3 text-sm text-foreground">
                  <span className="font-medium text-foreground">ROI kampanii:</span>
                  <Tooltip content="ROI wyliczamy jako (Przych√≥d - Koszt) / Koszt w ujƒôciu miesiƒôcznym.">
                    <Button variant="secondary" size="sm">
                      142%
                    </Button>
                  </Tooltip>
                </div>
                <div className="flex items-center gap-3 text-sm text-foreground">
                  <span className="font-medium text-foreground">≈öredni czas uko≈Ñczenia:</span>
                  <Tooltip side="top" align="start" content="≈örednia bazuje na ostatnich 90 dniach i uwzglƒôdnia tylko modu≈Çy uko≈Ñczone w ca≈Ço≈õci.">
                    <span className="inline-flex items-center rounded-md border border-dashed border-border px-2 py-1 text-xs text-muted-foreground">
                      4.5 h
                    </span>
                  </Tooltip>
                </div>
                <p className="text-xs text-muted-foreground">
                  Tooltip zachowuje 150 ms op√≥≈∫nienia, aby nie zas≈Çaniaƒá informacji podczas przypadkowych hover√≥w.
                </p>
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Popover akcji grupowych</CardTitle>
                <CardDescription>Przydatny w listach u≈ºytkownik√≥w ‚Äì pozwala na szybkie wybory bez opuszczania widoku.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Popover
                  trigger={
                    <Button variant="outline" size="sm">
                      ZarzƒÖdzaj uczestnikami
                    </Button>
                  }
                  title="Bulk actions"
                  description="Wybierz akcjƒô, kt√≥ra zostanie zastosowana do zaznaczonych rekord√≥w."
                >
                  <div className="space-y-2 text-sm">
                    <button
                      type="button"
                      className="w-full rounded-lg px-3 py-2 text-left transition hover:bg-blue-50 hover:text-blue-700"
                      onClick={() =>
                        showToast({
                          title: 'Przypomnienie wys≈Çane',
                          description: 'Powiadomienie e-mail trafi do 24 uczestnik√≥w.',
                          variant: 'success',
                        })
                      }
                    >
                      Wy≈õlij przypomnienie
                    </button>
                    <button
                      type="button"
                      className="w-full rounded-lg px-3 py-2 text-left transition hover:bg-blue-50 hover:text-blue-700"
                      onClick={() =>
                        showToast({
                          title: 'Udostƒôpniono certyfikat',
                          description: 'Certyfikaty zostanƒÖ wygenerowane po zatwierdzeniu prowadzƒÖcego.',
                          variant: 'info',
                        })
                      }
                    >
                      Udostƒôpnij certyfikat
                    </button>
                    <button
                      type="button"
                      className="w-full rounded-lg px-3 py-2 text-left text-rose-600 transition hover:bg-rose-50"
                      onClick={() =>
                        showToast({
                          title: 'Uwaga',
                          description: 'Cofniƒôcie dostƒôpu usuwa u≈ºytkownika ze wszystkich grup.',
                          variant: 'warning',
                        })
                      }
                    >
                      Cofnij dostƒôp
                    </button>
                  </div>
                </Popover>
                <p className="text-xs text-muted-foreground">
                  Popover zamyka siƒô po klikniƒôciu poza panel lub naci≈õniƒôciu ESC ‚Äì nie blokuje kontekstu strony.
                </p>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Badges i statusy"
          description="InformujƒÖ o stanie zasobu, nadajƒÖ priorytet komunikatom i pomagajƒÖ filtrowaƒá listy."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Warianty Badge</CardTitle>
                <CardDescription>Ton i wariant dostosowany do kontekstu ‚Äì uporzƒÖdkuj etykiety status√≥w.</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-wrap gap-3">
                {badgeVariantShowcase.map((badge) => (
                  <Badge
                    key={`${badge.label}-${badge.variant}`}
                    tone={badge.tone}
                    variant={badge.variant}
                  >
                    {badge.label}
                  </Badge>
                ))}
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>StatusTag</CardTitle>
                <CardDescription>Szybkie oznaczenie stanu kursu, u≈ºytkownika lub procesu.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                {statusTagShowcase.map((status) => (
                  <div key={status.status} className="flex items-center justify-between rounded-md border border-border px-3 py-2 text-sm text-muted-foreground">
                    <span>{status.label}</span>
                    <StatusTag status={status.status} />
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Wska≈∫niki postƒôpu"
          description="WizualizujƒÖ stan trwajƒÖcych proces√≥w ‚Äì od uko≈Ñczenia kursu po synchronizacjƒô danych."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Progress bar</CardTitle>
                <CardDescription>Liniowy komponent z mo≈ºliwo≈õciƒÖ pask√≥w ostrzegawczych i wariantem paskowanym.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <ProgressBar
                  label="Uko≈Ñczenie kursu"
                  value={courseProgress}
                  showValue
                />
                <ProgressBar
                  label="Synchronizacja materia≈Ç√≥w"
                  value={syncProgress}
                  striped
                  showValue
                />
                <div className="flex justify-end">
                  <Button
                    size="sm"
                    variant="secondary"
                    onClick={() => {
                      setCourseProgress((prev) => (prev + 18 > 100 ? 0 : prev + 18));
                      setSyncProgress((prev) => (prev + 12 > 100 ? 16 : prev + 12));
                    }}
                  >
                    Symuluj postƒôp
                  </Button>
                </div>
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Progress circle</CardTitle>
                <CardDescription>Wariant ko≈Çowy ‚Äî idealny do prezentacji KPI i wynik√≥w indywidualnych.</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-wrap gap-6">
                <ProgressCircle value={courseProgress} label="Wynik testu" />
                <ProgressCircle value={syncProgress} label="Upload zasob√≥w" />
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Avatar"
          description="Zdjƒôcie lub inicja≈Çy z opcjonalnym statusem obecno≈õci ‚Äì wykorzystywany w listach u≈ºytkownik√≥w."
        >
          <Card className="border border-border">
            <CardHeader>
              <CardTitle>Zesp√≥≈Ç trener√≥w</CardTitle>
              <CardDescription>Avatary wspierajƒÖ r√≥≈ºne rozmiary, kszta≈Çty i wska≈∫niki statusu.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {avatarShowcase.map((profile) => (
                <div key={profile.name} className="flex items-center gap-3 rounded-md border border-border px-3 py-2">
                  <Avatar
                    name={profile.name}
                    src={profile.src || undefined}
                    size="md"
                    status={profile.status}
                    alt={profile.name}
                    initialsFallback={profile.name
                      .split(' ')
                      .map((part) => part[0])
                      .join('')
                      .slice(0, 2)
                      .toUpperCase()}
                  />
                  <div className="flex flex-col text-sm">
                    <span className="font-medium text-slate-800">{profile.name}</span>
                    <span className="text-xs text-muted-foreground">{profile.role}</span>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </Section>

        <Section
          title="Toast (Powiadomienia)"
          description="Lekkie komunikaty pojawiajƒÖ siƒô w prawym dolnym rogu ‚Äì informujƒÖ o stanie akcji bez blokowania interfejsu."
        >
          <Card className="border border-border">
            <CardHeader>
              <CardTitle>Scenariusze powiadomie≈Ñ</CardTitle>
              <CardDescription>Toast wspiera warianty sukcesu, informacji, ostrze≈ºenia i b≈Çƒôdu. Ka≈ºdy posiada ikonƒô i kolor t≈Ça.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex flex-wrap gap-3">
                <Button
                  size="sm"
                  onClick={() =>
                    showToast({
                      title: 'Kurs zapisany',
                      description: 'Zmiany zosta≈Çy zapisane i sƒÖ widoczne dla instruktor√≥w.',
                      variant: 'success',
                    })
                  }
                >
                  Sukces
                </Button>
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() =>
                    showToast({
                      title: 'Przetwarzamy raport',
                      description: 'Proces potrwa oko≈Ço 2 minut. Powiadomimy Ciƒô e-mailem.',
                      variant: 'info',
                    })
                  }
                >
                  Informacja
                </Button>
                <Button
                  size="sm"
                  variant="secondary"
                  onClick={() =>
                    showToast({
                      title: 'Limit miejsc bliski wyczerpania',
                      description: 'Pozosta≈Ço 5 miejsc na warsztaty. Rozwa≈º zwiƒôkszenie limitu.',
                      variant: 'warning',
                    })
                  }
                >
                  Ostrze≈ºenie
                </Button>
                <Button
                  size="sm"
                  variant="destructive"
                  onClick={() =>
                    showToast({
                      title: 'B≈ÇƒÖd zapisu',
                      description: 'Nie uda≈Ço siƒô zapisaƒá zmian. Spr√≥buj ponownie lub skontaktuj siƒô z supportem.',
                      variant: 'error',
                    })
                  }
                >
                  B≈ÇƒÖd
                </Button>
              </div>
              <p className="text-xs text-muted-foreground">
                Domy≈õlny timeout to 4 s, a u≈ºytkownik mo≈ºe rƒôcznie zamknƒÖƒá toast. Provider obs≈Çuguje wiele notif√≥w jednocze≈õnie.
              </p>
            </CardContent>
          </Card>
        </Section>

        <Section
          title="Mega menu"
          description="Rozszerzona nawigacja prezentujƒÖca kluczowe sekcje produktu w panelu rozwijanym."
        >
          <div className="rounded-2xl border border-border bg-card p-6">
            <MegaMenu
              triggerLabel="Nawigacja"
              description="Poznaj najwa≈ºniejsze modu≈Çy EduPlatform ‚Äì od pulpitu po integracje i ustawienia uprawnie≈Ñ."
              columns={megaMenuColumns}
              cta={{ label: 'Przejd≈∫ do dokumentacji', href: '/docs' }}
            />
          </div>
        </Section>

        <Section
          title="Menu kontekstowe"
          description="Szybkie akcje dostƒôpne po klikniƒôciu prawym przyciskiem ‚Äì np. na elementach listy."
        >
          <div className="rounded-2xl border border-border bg-card p-6">
            <ContextMenu items={contextMenuItems}>
              <div className="rounded-xl border border-border bg-muted/50 p-6 text-sm text-muted-foreground">
                Kliknij prawym przyciskiem, aby zobaczyƒá menu akcji dla raportu miesiƒôcznego.
              </div>
            </ContextMenu>
          </div>
        </Section>

        <Section
          title="Split Button"
          description="Przycisk z akcjƒÖ g≈Ç√≥wnƒÖ oraz dodatkowymi opcjami w rozwijanym menu."
        >
          <div className="rounded-2xl border border-border bg-card p-6">
            <SplitButton
              label="Dodaj zas√≥b"
              onPrimaryAction={() =>
                showToast({
                  title: 'Dodano zas√≥b',
                  description: 'Utworzono podstawowy szkielet nowego kursu.',
                  variant: 'success',
                })
              }
              options={splitButtonItems}
            />
          </div>
        </Section>

        <Section
          title="Linki tekstowe"
          description="Komponent TextLink zapewnia sp√≥jne style inline, warianty kolorystyczne i pier≈õcie≈Ñ focus do nawigacji klawiaturƒÖ."
        >
          <div className="grid gap-6 md:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Warianty kolorystyczne</CardTitle>
                <CardDescription>Domy≈õlny niebieski, subtelny szary oraz wariant do ciemnych t≈Ç na CTA.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-3 text-sm text-foreground">
                <p>
                  <TextLink href="#default">Domy≈õlny link</TextLink> reaguje na hover i focus zgodnie z brand kolorami.
                </p>
                <p>
                  <TextLink href="#subtle" variant="subtle">
                    Subtelny link
                  </TextLink>{' '}
                  pasuje do tre≈õci w sekcjach informacyjnych.
                </p>
                <div className="rounded-lg bg-slate-900 p-4 text-slate-100">
                  <TextLink href="#inverse" variant="inverse">
                    Link na ciemnym tle
                  </TextLink>{' '}
                  zachowuje wysoki kontrast.
                </div>
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Styl podkre≈õlenia i linki zewnƒôtrzne</CardTitle>
                <CardDescription>Mo≈ºemy sterowaƒá podkre≈õleniem oraz automatycznie oznaczaƒá linki zewnƒôtrzne.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4 text-sm text-foreground">
                <p>
                  <TextLink href="#always-underline" underline="always">
                    Zawsze podkre≈õlony link
                  </TextLink>{' '}
                  sprawdza siƒô w tre≈õciach dokumentacyjnych.
                </p>
                <p>
                  <TextLink href="#no-underline" underline="none">
                    Link bez podkre≈õlenia
                  </TextLink>{' '}
                  bazuje na kolorze i focus outline.
                </p>
                <p>
                  <TextLink
                    href="https://eduplatform.io"
                    external
                    underline="always"
                  >
                    Zewnƒôtrzny link z target=&quot;_blank&quot;
                  </TextLink>
                  . Wariant `external` automatycznie ustawia rel=&quot;noopener noreferrer&quot;.
                </p>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Chips i aktywne filtry"
          description="Pigu≈Çki stosowane do wyboru kategorii i prezentacji aktywnych filtr√≥w."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Wyb√≥r kategorii</CardTitle>
                <CardDescription>Chipy wspierajƒÖ tryb wielokrotnego wyboru i pod≈õwietlenie aktywnych opcji.</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-wrap gap-2">
                {['Design', 'UX', 'AI', 'Frontend', 'Analityka'].map((chip) => (
                  <Chip
                    key={chip}
                    onClick={() => toggleChip(chip)}
                    selected={selectedChips.includes(chip)}
                  >
                    {chip}
                  </Chip>
                ))}
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Aktywne filtry</CardTitle>
                <CardDescription>Klikniƒôcie krzy≈ºyka usuwa filtr i aktualizuje zapytanie.</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-wrap gap-2">
                {activeFilters.length > 0 ? (
                  activeFilters.map((filter) => (
                    <FilterPill
                      key={filter.label}
                      label={filter.label}
                      count={filter.count}
                      onRemove={() => removeFilter(filter.label)}
                    />
                  ))
                ) : (
                  <p className="text-sm text-muted-foreground">Brak aktywnych filtr√≥w. Wybierz chip, aby zastosowaƒá filtracjƒô.</p>
                )}
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title='Lista z przyciskiem "Za≈Çaduj wiƒôcej"'
          description="Pozwala ods≈Çaniaƒá kolejne porcje wynik√≥w bez paginacji."
        >
          <Card className="border border-border">
            <CardHeader>
              <CardTitle>Lista kurs√≥w</CardTitle>
              <CardDescription>Pierwsze trzy elementy sƒÖ widoczne, kolejne pojawiajƒÖ siƒô po klikniƒôciu.</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <ul className="space-y-3 text-sm text-foreground">
                {demoCourses.slice(0, visibleCoursesCount).map((course) => (
                  <li key={course.id} className="flex items-center justify-between rounded-lg border border-border bg-card px-4 py-2">
                    <span className="font-medium">{course.title}</span>
                    <span className="text-xs text-muted-foreground">{course.category}</span>
                  </li>
                ))}
              </ul>
              {visibleCoursesCount < demoCourses.length ? (
                <LoadMoreButton
                  loading={loadingMore}
                  onClick={handleLoadMore}
                >
                  Za≈Çaduj wiƒôcej kurs√≥w
                </LoadMoreButton>
              ) : (
                <p className="text-xs text-muted-foreground">Wy≈õwietlono wszystkie kursy demo.</p>
              )}
            </CardContent>
          </Card>
        </Section>

        <Section
          title="Komunikaty inline"
          description="Mini komponenty do przekazywania informacji pod polami formularza oraz w tre≈õci."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Warianty status√≥w</CardTitle>
                <CardDescription>Sp√≥jne kolory i ikony dla status√≥w info, success, warning oraz error.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-2">
                <InlineMessage variant="info">
                  Info: aplikacja zapisze ustawienia automatycznie co 30 sekund.
                </InlineMessage>
                <InlineMessage variant="success">
                  Sukces: u≈ºytkownik zosta≈Ç dodany do zespo≈Çu.
                </InlineMessage>
                <InlineMessage variant="warning">
                  Ostrze≈ºenie: limit licencji jest bliski wyczerpania.
                </InlineMessage>
                <InlineMessage variant="error">
                  B≈ÇƒÖd: nie uda≈Ço siƒô po≈ÇƒÖczyƒá z API. Spr√≥buj ponownie.
                </InlineMessage>
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Helper tekst dla p√≥l</CardTitle>
                <CardDescription>Wariant `helper` u≈ºywany w komponentach formularza.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-2 text-sm text-muted-foreground">
                <InlineMessage variant="helper">
                  Helper: wprowad≈∫ co najmniej 8 znak√≥w, w tym cyfrƒô i znak specjalny.
                </InlineMessage>
                <InlineMessage withIcon={false}>
                  Wariant bez ikony ‚Äì tekst dopasowuje siƒô do kontekstu.
                </InlineMessage>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Alerty globalne"
          description="Komponent AlertBanner s≈Çu≈ºy do wy≈õwietlania informacji systemowych w g√≥rnej czƒô≈õci layoutu."
        >
          <div className="space-y-4">
            <AlertBanner
              variant="info"
              title="Nowa aktualizacja systemu"
              description="Wprowadzili≈õmy nowe role u≈ºytkownik√≥w oraz mo≈ºliwo≈õƒá generowania raport√≥w miesiƒôcznych."
            />
            <AlertBanner
              variant="success"
              title="Plan premium aktywny"
              description="Twoja subskrypcja zosta≈Ça przed≈Çu≈ºona do 12.2025."
            />
            <AlertBanner
              variant="warning"
              title="Przypomnienie o danych rozliczeniowych"
              description="Zaktualizuj NIP oraz adres fakturowania, aby uniknƒÖƒá przerwy w p≈Çatno≈õciach."
            />
            {isStatusAlertVisible ? (
              <AlertBanner
                variant="error"
                title="Problem z dostƒôpem do API"
                description="Us≈Çuga raportowa zwraca b≈ÇƒÖd 503. Pracujemy nad przywr√≥ceniem dzia≈Çania."
                onDismiss={() => setIsStatusAlertVisible(false)}
              />
            ) : (
              <Button
                variant="outline"
                className="border-border text-foreground hover:bg-slate-100"
                onClick={() => setIsStatusAlertVisible(true)}
              >
                Poka≈º alert krytyczny ponownie
              </Button>
            )}
          </div>
        </Section>

        <Section
          title="Breadcrumbs"
          description="Pokazuje pozycjƒô u≈ºytkownika w strukturze nawigacji i umo≈ºliwia szybki powr√≥t do poprzednich poziom√≥w."
        >
          <div className="space-y-4">
            <Breadcrumbs
              items={[
                { label: 'Dashboard', href: '/admin/dashboard' },
                { label: 'Kursy', href: '/admin/courses' },
                { label: 'React dla zespo≈Ç√≥w' },
              ]}
            />
            <Breadcrumbs
              items={[
                { label: 'Home', href: '/' },
                { label: 'Billing', href: '/account/billing' },
                { label: 'History' },
              ]}
              separator={<span className="text-slate-300">/</span>}
            />
          </div>
        </Section>

        <Section
          title="Paginacja"
          description="Komponent nawigacji paginacyjnej z obs≈ÇugƒÖ skr√≥conych zakres√≥w i dezaktywowanymi przyciskami."
        >
          <Card className="border border-border">
            <CardHeader>
              <CardTitle>Paginacja zasob√≥w</CardTitle>
              <CardDescription>Zintegrowana z listami i tabelami; wspiera prze≈ÇƒÖczanie stron oraz skracanie zakresu.</CardDescription>
            </CardHeader>
            <CardContent className="flex flex-col gap-4">
              <div className="flex items-center justify-between text-sm text-muted-foreground">
                <span>Wyniki  {(paginationPage - 1) * 10 + 1} ‚Äì {Math.min(paginationPage * 10, 120)}  z  120</span>
                <Pagination
                  page={paginationPage}
                  pageCount={12}
                  showEdges
                  onPageChange={(page) => setPaginationPage(page)}
                />
              </div>
              <p className="text-xs text-muted-foreground">
                Skrajne strony sƒÖ zawsze widoczne, a brakujƒÖce zakresy zastƒôpuje wielokropek. Wej≈õcia <code>disabled</code> zdejmuje interakcjƒô z przyciskami Poprzednia/Nastƒôpna.
              </p>
            </CardContent>
          </Card>
        </Section>

        <Section
          title="Footer"
          description="Sekcja ko≈ÑczƒÖca stronƒô z nawigacjƒÖ, informacjami prawnymi i logotypem."
        >
          <Footer
            className="rounded-2xl border border-border"
            sections={[
              {
                title: 'Produkt',
                links: [
                  { label: 'Funkcje', href: '/#features' },
                  { label: 'Cennik', href: '/#pricing' },
                  { label: 'Status us≈Çugi', href: '/status' },
                ],
              },
              {
                title: 'Zasoby',
                links: [
                  { label: 'Dokumentacja', href: '/docs' },
                  { label: 'Centrum pomocy', href: '/support' },
                  { label: 'Blog', href: '/blog' },
                ],
              },
              {
                title: 'Firma',
                links: [
                  { label: 'O nas', href: '/about' },
                  { label: 'Kariera', href: '/career' },
                  { label: 'Kontakt', href: '/contact' },
                ],
              },
            ]}
            logo={<span className="text-lg font-semibold">EduPlatform</span>}
            description="Dostarczamy kompleksowƒÖ platformƒô do zarzƒÖdzania edukacjƒÖ i rozwojem kompetencji w organizacjach."
          />
        </Section>

        <Section
          title="Komponenty administracyjne"
          description="Elementy wykorzystywane w panelu admina. Prezentujemy je na przyk≈Çadowych danych."
        >
          <div className="space-y-12">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Dashboard widgets</CardTitle>
                <CardDescription>Szybkie metryki biznesowe w formie kart.</CardDescription>
              </CardHeader>
              <CardContent>
                <DashboardWidgets stats={dashboardStats} />
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Data Table</CardTitle>
                <CardDescription>Komponent listy zasob√≥w kompatybilny z akcjami wierszy.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <DataTable<DemoUser>
                  data={tableData}
                  columns={tableColumns}
                  title="U≈ºytkownicy demo"
                  selectableRows
                  getRowId={(item) => item.id}
                  onSelectionChange={setSelectedUsers}
                  initialPageSize={5}
                  pageSizeOptions={[5, 10, 20]}
                  actions={[
                    {
                      name: 'Ping',
                      handler: (item) =>
                        showToast({
                          title: 'Test ping',
                          description: `Wys≈Çano przypomnienie do ${item.name}`,
                          variant: 'info',
                        }),
                    },
                    {
                      name: 'Usu≈Ñ',
                      handler: (item) =>
                        showToast({
                          title: 'Symulacja usuniƒôcia',
                          description: `${item.name} zosta≈Çby oznaczony jako usuniƒôty.`,
                          variant: 'warning',
                          action: {
                            label: 'Cofnij',
                            onClick: (toastId) => {
                              showToast({
                                id: toastId,
                                title: 'Cofniƒôto operacjƒô',
                                description: `${item.name} pozostaje aktywny`,
                                variant: 'success',
                              });
                            },
                          },
                        }),
                    },
                  ]}
                  onSearch={(term) =>
                    showToast({
                      title: 'Filtrowanie tabeli',
                      description: `Szukasz: ${term}`,
                      variant: 'info',
                    })
                  }
                  searchPlaceholder="Wyszukaj u≈ºytkownika..."
                  onAdd={() => setIsModalOpen(true)}
                  onExport={() =>
                    showToast({
                      title: 'Eksport danych',
                      description: 'Przygotowano plik CSV do pobrania.',
                      variant: 'success',
                    })
                  }
                />
                <div className="rounded-lg bg-slate-100 px-4 py-3 text-sm text-muted-foreground">
                  <p>
                    Struktura danych: <strong>{Object.keys(tableData[0]).join(', ')}</strong>.
                    Rola ‚Üí liczba rekord√≥w: {Object.entries(summarizedRoles).map(([role, count]) => `${role} (${count})`).join(', ')}.
                  </p>
                  <p className="mt-2 text-xs">
                    Zaznaczeni u≈ºytkownicy: {selectedUsers.length > 0 ? selectedUsers.map((user) => user.name).join(', ') : 'brak'}.
                  </p>
                </div>
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Admin Form</CardTitle>
                <CardDescription>Dynamiczny formularz CRUD z walidacjƒÖ wymagalnych p√≥l.</CardDescription>
              </CardHeader>
              <CardContent className="grid gap-6 lg:grid-cols-2">
                <AdminForm
                  fields={formFields}
                  title="Dodaj cz≈Çonka zespo≈Çu"
                  onSubmit={(data) => {
                    setFormState(data);
                    showToast({
                      title: 'Formularz wys≈Çany',
                      description: `${data.name} zapisany jako ${data.role}.`,
                      variant: 'success',
                    });
                  }}
                  submitButtonText="Zapisz u≈ºytkownika"
                />
                <div className="space-y-4 rounded-xl border border-dashed border-border bg-card p-6">
                  <h3 className="text-lg font-semibold text-foreground">PodglƒÖd odpowiedzi</h3>
                  <p className="text-sm text-muted-foreground">
                    W brandbooku dane zapisywane sƒÖ lokalnie, ≈ºeby pokazaƒá strukturƒô obiektu wysy≈Çanego do API.
                  </p>
                  <pre className="overflow-auto rounded-lg bg-slate-900 px-4 py-3 text-xs text-slate-100">
                    {JSON.stringify(formState ?? { status: 'Czekamy na przes≈Çanie formularza...' }, null, 2)}
                  </pre>
                </div>
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Finance Charts</CardTitle>
                <CardDescription>Komponenty wizualizacji korzystajƒÖce z Recharts.</CardDescription>
              </CardHeader>
              <CardContent>
                <FinanceCharts revenueData={revenueData} />
              </CardContent>
            </Card>

            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Kalendarz / Agenda dnia</CardTitle>
                <CardDescription>
                  Zaawansowany kalendarz w stylu Outlooka z funkcjami drag & drop, resize, edycjƒÖ przez modal, wykrywaniem konflikt√≥w i filtrami kategorii.
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <Calendar
                  events={calendarEvents}
                  onSlotCreate={handleCalendarSlotCreate}
                  onEventClick={handleCalendarEventClick}
                  onEventUpdate={handleCalendarEventUpdate}
                  onEventDelete={handleCalendarEventDelete}
                  onEventDuplicate={handleCalendarEventDuplicate}
                  showConflicts={true}
                  allowOverlap={true}
                  onViewChange={(mode) =>
                    showToast({
                      title: 'Zmieniono widok',
                      description: mode === 'month' ? 'Widok miesiƒÖca' : mode === 'week' ? 'Widok tygodnia' : 'Widok dnia',
                      variant: 'info',
                    })
                  }
                  onDateChange={(date) =>
                    showToast({
                      title: 'Nowy zakres dat',
                      description: date.toLocaleDateString(),
                      variant: 'info',
                    })
                  }
                />
                <div className="space-y-2">
                  <p className="text-sm font-semibold text-foreground">üéØ Scenariusze testowe:</p>
                  <ul className="text-xs text-muted-foreground space-y-1 list-disc list-inside">
                    <li><strong>Drag & Drop:</strong> PrzeciƒÖgnij wydarzenie na inny dzie≈Ñ lub godzinƒô</li>
                    <li><strong>Resize:</strong> Najed≈∫ na krawƒôd≈∫ wydarzenia i przeciƒÖgnij, aby zmieniƒá czas trwania</li>
                    <li><strong>Context Menu:</strong> Kliknij prawym przyciskiem na wydarzenie ‚Üí Edytuj / Duplikuj / Usu≈Ñ</li>
                    <li><strong>Widok miesiƒÖca:</strong> Prze≈ÇƒÖcz na widok "MiesiƒÖc" i kliknij 2x na dzie≈Ñ, aby przej≈õƒá do widoku dnia</li>
                    <li><strong>Konflikt:</strong> Spr√≥buj stworzyƒá nak≈ÇadajƒÖce siƒô wydarzenia (czerwona ikona ostrze≈ºenia)</li>
                    <li><strong>Filtry:</strong> Kliknij kategoriƒô aby filtrowaƒá wydarzenia (Spotkanie, Warsztat, Demo, Prywatne)</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </div>
        </Section>

        <Section
          title="Modal i toast ‚Äì interakcje"
          description="Rozszerzone kontrolki do potwierdze≈Ñ oraz mikropowiadomie≈Ñ z akcjami."
        >
          <div className="grid gap-6 lg:grid-cols-2">
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Modal</CardTitle>
                <CardDescription>Obs≈Çuguje rozmiary, sekcjƒô stopki, blokadƒô zamkniƒôcia oraz stany ≈Çadowania.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <p className="text-sm text-muted-foreground">
                  Idealny do krytycznych potwierdze≈Ñ ‚Äì mo≈ºna zablokowaƒá zamkniƒôcie do czasu zako≈Ñczenia zapisu, dodaƒá w≈Çasny opis w stopce i akcje z ikonami.
                </p>
                <div className="flex flex-wrap gap-3">
                  <Button
                    className="bg-blue-600 text-white hover:bg-blue-700"
                    onClick={() => {
                      setModalLoading(false);
                      setIsModalOpen(true);
                    }}
                  >
                    Poka≈º modal potwierdzenia
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => {
                      setModalLoading(true);
                      setIsModalOpen(true);
                    }}
                  >
                    Poka≈º modal z loaderem
                  </Button>
                </div>
              </CardContent>
            </Card>
            <Card className="border border-border">
              <CardHeader>
                <CardTitle>Toast</CardTitle>
                <CardDescription>Warianty z akcjami (np. Undo) i w≈Çasnym czasem ≈ºycia.</CardDescription>
              </CardHeader>
              <CardContent className="flex flex-col gap-3">
                <p className="text-sm text-muted-foreground">
                  Provider obs≈Çuguje kolejkƒô, akcje pomocnicze oraz mo≈ºliwo≈õƒá ustawienia `duration=null`, by utrzymaƒá komunikat do zamkniƒôcia przez u≈ºytkownika.
                </p>
                <div className="flex flex-wrap gap-3">
                  <Button
                    className="bg-emerald-600 text-white hover:bg-emerald-700"
                    onClick={() =>
                      showToast({
                        title: 'Uda≈Ço siƒô!',
                        description: 'Twoja konfiguracja zosta≈Ça zapisana.',
                        variant: 'success',
                      })
                    }
                  >
                    Sukces
                  </Button>
                  <Button
                    className="bg-amber-500 text-white hover:bg-amber-600"
                    onClick={() =>
                      showToast({
                        title: 'Ostrze≈ºenie',
                        description: 'Sprawd≈∫ limit przyznanych licencji.',
                        variant: 'warning',
                      })
                    }
                  >
                    Ostrze≈ºenie
                  </Button>
                  <Button
                    className="bg-rose-500 text-white hover:bg-rose-600"
                    onClick={() =>
                      showToast({
                        title: 'B≈ÇƒÖd',
                        description: 'Nie uda≈Ço siƒô po≈ÇƒÖczyƒá z serwerem API.',
                        variant: 'error',
                      })
                    }
                  >
                    B≈ÇƒÖd
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() =>
                      showToast({
                        title: 'Wys≈Çano raport',
                        description: 'Masz 10 sekund na cofniƒôcie wysy≈Çki.',
                        variant: 'info',
                        duration: 10000,
                        action: {
                          label: 'Cofnij',
                          onClick: () =>
                            showToast({
                              title: 'Cofniƒôto operacjƒô',
                              description: 'Raport wr√≥ci≈Ç do szkic√≥w.',
                              variant: 'success',
                            }),
                        },
                      })
                    }
                  >
                    Toast z akcjƒÖ
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </Section>
      </div>

      <Modal
        open={isModalOpen}
        onClose={() => !modalLoading && setIsModalOpen(false)}
        title="Potwierd≈∫ akcjƒô"
        description="To demo modala ‚Äì wykorzystaj je do blokowania krytycznych operacji, takich jak usuniƒôcie kursu."
        size="lg"
        loading={modalLoading}
        preventCloseOnOverlay={modalLoading}
        preventCloseOnEsc={modalLoading}
        footerContent={<span className="text-xs text-muted-foreground">Akcje zatwierdze≈Ñ sƒÖ logowane w dzienniku audytowym.</span>}
        actions={[
          {
            label: 'Anuluj',
            variant: 'secondary',
            onClick: () => setModalLoading(false),
            dismiss: true,
          },
          {
            label: modalLoading ? 'Przetwarzanie‚Ä¶' : 'Potwierd≈∫',
            icon: <Send className="h-4 w-4" />,
            onClick: handleModalConfirm,
            loading: modalLoading,
          },
        ]}
      >
        <p className="text-sm text-muted-foreground">
          Upewnij siƒô, ≈ºe u≈ºytkownik rozumie konsekwencje. W tre≈õci modal dodaj kluczowe szczeg√≥≈Çy operacji lub dane
          kontekstowe.
        </p>
      </Modal>
    </div>
  );
}
